<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Teaching with Interactive Data Visualization</title><link href="http://walkerke.github.io/" rel="alternate"></link><link href="http://walkerke.github.io/feeds%5Ckyle-walker.atom.xml" rel="self"></link><id>http://walkerke.github.io/</id><updated>2014-12-20T00:00:00-06:00</updated><entry><title>Charting time series data with dygraphs in R and Python</title><link href="http://walkerke.github.io/2014/12/dygraphs/" rel="alternate"></link><updated>2014-12-20T00:00:00-06:00</updated><author><name>Kyle Walker</name></author><id>tag:walkerke.github.io,2014-12-20:2014/12/dygraphs/</id><summary type="html">&lt;p&gt;This past week, the good people at &lt;a href="http://www.rstudio.com"&gt;RStudio&lt;/a&gt; advertised over Twitter the release of &lt;a href="http://www.htmlwidgets.org/index.html"&gt;htmlwidgets for R&lt;/a&gt;, a project in collaboration with &lt;a href="http://rcharts.io"&gt;rCharts&lt;/a&gt; wizards &lt;a href="https://twitter.com/ramnath_vaidya"&gt;Ramnath Vaidyanathan&lt;/a&gt; and &lt;a href="https://twitter.com/timelyportfolio"&gt;Kenton Russell&lt;/a&gt;. The packages showcased are incredible; I was particularly intrigued by the &lt;a href="http://rstudio.github.io/dygraphs/"&gt;dygraphs&lt;/a&gt; package, which creates interactive time-series charts.  &lt;/p&gt;
&lt;p&gt;Aside from maps, time series line charts are the most common chart type I use in my teaching, as I often discuss how characteristics of places evolve over time.  As such, I took dygraphs for a spin to create charts relevant to a couple topics I address in World Regional Geography.  &lt;/p&gt;
&lt;p&gt;The first chart shows quarterly unemployment rates in Egypt over the past decade.  I obtained the data from &lt;a href="https://www.quandl.com"&gt;Quandl&lt;/a&gt;, a massive repository of publicly-available datasets, by connecting to their API.  Quandl aims to be as user-friendly as possible; as such, &lt;a href="https://www.quandl.com/ILOSTAT/UNE_DEAP_RT_SEX_T_Q_EGY-Unemployment-Rate-Quarterly-Egypt"&gt;on the page for the dataset you want&lt;/a&gt;, you can get the command to access the data in R (or any number of other languages/formats) with a single click.  Additionally, you can specify the format for the data from Quandl; dygraphs in R accepts data in &lt;code&gt;xts&lt;/code&gt; format, which Quandl can return for me.  &lt;/p&gt;
&lt;p&gt;Once I have the data, I can create the plot.    &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;library&lt;span class="p"&gt;(&lt;/span&gt;dygraphs&lt;span class="p"&gt;)&lt;/span&gt;
library&lt;span class="p"&gt;(&lt;/span&gt;Quandl&lt;span class="p"&gt;)&lt;/span&gt;


egypt &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; Quandl&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ILOSTAT/UNE_DEAP_RT_SEX_T_Q_EGY&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; type &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;xts&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

dygraph&lt;span class="p"&gt;(&lt;/span&gt;egypt&lt;span class="p"&gt;,&lt;/span&gt; main &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Quarterly unemployment in Egypt, 2003-2013&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;
  dySeries&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;V1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; label &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Unemployment (%)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;
  dyRangeSelector&lt;span class="p"&gt;(&lt;/span&gt;strokeColor &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;darkred&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; fillColor &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;darkred&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;
  dyOptions&lt;span class="p"&gt;(&lt;/span&gt;colors &lt;span class="o"&gt;=&lt;/span&gt; c&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;darkred&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;darkred&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;iframe id="frame" src="http://walkerke.github.io/teaching-with-datavis/dygraphs/egypt.html" height="500" width="800" frameBorder = "0" scrolling = "no"&gt;&lt;/iframe&gt;

&lt;p&gt;The dygraphs package supports piping with the &lt;code&gt;%&amp;gt;%&lt;/code&gt; operator from the &lt;strong&gt;magrittr&lt;/strong&gt; package, which organizes the code nicely.  I've changed the label in the legend and the colors, though I did notice that I had to supply a length-2 vector of colors to get the line's color to change, even though I only had one line.  I've also created a range selector at the bottom of the plot.  The chart itself has excellent interactivity; click and drag on the plot to zoom in to a specific section, and double-click to return to the original view.  In class, I can use this chart to show the major spike in unemployment after the fall of the Mubarak regime in early 2011. Unemployment, especially among youth, remains a critical issue in Egypt; &lt;a href="http://data.worldbank.org/indicator/SL.UEM.1524.ZS"&gt;the World Bank estimates that 38.9 percent of Egyptians aged 15-24 were unemployed in 2013&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;The World Bank API is also an excellent resource for demographic and economic data; &lt;a href="http://walkerke.github.io/2014/03/tfr-in-europe/"&gt;I've written about using it here&lt;/a&gt;.  Quandl also provides access to World Bank data, but I'll include an example below that involves connecting directly to the World Bank's API to show how to get data from a different format into dygraphs.  &lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;WDI&lt;/strong&gt; package allows R users to connect directly to the World Bank's API and download data for selected countries, indicators, and years from the World Bank's &lt;a href="http://data.worldbank.org/"&gt;Open Data Catalog&lt;/a&gt;.  The code below fetches &lt;a href="http://data.worldbank.org/indicator/TX.QTY.MRCH.XD.WD"&gt;export volume index data&lt;/a&gt;, which shows how the relative size of countries' export economies have changed over time.  I discuss this in class heavily in the context of China, so I'll get data to compare China and the United States.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;library&lt;span class="p"&gt;(&lt;/span&gt;WDI&lt;span class="p"&gt;)&lt;/span&gt;
library&lt;span class="p"&gt;(&lt;/span&gt;tidyr&lt;span class="p"&gt;)&lt;/span&gt;
library&lt;span class="p"&gt;(&lt;/span&gt;xts&lt;span class="p"&gt;)&lt;/span&gt;
library&lt;span class="p"&gt;(&lt;/span&gt;dplyr&lt;span class="p"&gt;)&lt;/span&gt;

df &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; WDI&lt;span class="p"&gt;(&lt;/span&gt;country &lt;span class="o"&gt;=&lt;/span&gt; c&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;CN&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;US&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; indicator &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;TX.QTY.MRCH.XD.WD&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; start &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1980&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; end &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;2013&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; extra &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;FALSE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

df&lt;span class="o"&gt;$&lt;/span&gt;exports &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; df&lt;span class="o"&gt;$&lt;/span&gt;TX.QTY.MRCH.XD.WD

df1 &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; df &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;
  select&lt;span class="p"&gt;(&lt;/span&gt;country&lt;span class="p"&gt;,&lt;/span&gt; year&lt;span class="p"&gt;,&lt;/span&gt; exports&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;
  mutate&lt;span class="p"&gt;(&lt;/span&gt;country &lt;span class="o"&gt;=&lt;/span&gt; gsub&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;United States&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;USA&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; df&lt;span class="o"&gt;$&lt;/span&gt;country&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;
  spread&lt;span class="p"&gt;(&lt;/span&gt;key &lt;span class="o"&gt;=&lt;/span&gt; country&lt;span class="p"&gt;,&lt;/span&gt; value &lt;span class="o"&gt;=&lt;/span&gt; exports&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;
  mutate&lt;span class="p"&gt;(&lt;/span&gt;date &lt;span class="o"&gt;=&lt;/span&gt; as.Date&lt;span class="p"&gt;(&lt;/span&gt;as.character&lt;span class="p"&gt;(&lt;/span&gt;year&lt;span class="p"&gt;),&lt;/span&gt; format &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;%Y&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;
  select&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;year&lt;span class="p"&gt;)&lt;/span&gt; 

xtdata &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; xts&lt;span class="p"&gt;(&lt;/span&gt;df1&lt;span class="p"&gt;,&lt;/span&gt; order.by &lt;span class="o"&gt;=&lt;/span&gt; df1&lt;span class="o"&gt;$&lt;/span&gt;date&lt;span class="p"&gt;)&lt;/span&gt; 

xtdata&lt;span class="o"&gt;$&lt;/span&gt;date &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kc"&gt;NULL&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The WDI package returns data in "tidy" format, in which rows represent country-years.  I've reshaped my data frame to "wide" format, so that columns represent countries, and then I converted the data frame to an &lt;code&gt;xts&lt;/code&gt; object for plotting with dygraphs.  Now, I can create the plot: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;dygraph&lt;span class="p"&gt;(&lt;/span&gt;xtdata&lt;span class="p"&gt;,&lt;/span&gt; main &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Export volume index, 1980-2013 (2000 = 100)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;
  dyHighlight&lt;span class="p"&gt;(&lt;/span&gt;highlightSeriesOpts &lt;span class="o"&gt;=&lt;/span&gt; list&lt;span class="p"&gt;(&lt;/span&gt;strokeWidth &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;
  dyOptions&lt;span class="p"&gt;(&lt;/span&gt;colors &lt;span class="o"&gt;=&lt;/span&gt; c&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;red&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;navy&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;iframe id="frame" src="http://walkerke.github.io/teaching-with-datavis/dygraphs/exports.html" height="500" width="800" frameBorder = "0" scrolling = "no"&gt;&lt;/iframe&gt;

&lt;p&gt;I've configured this plot so that a data series is highlighted if hovered over by the user's cursor.  The chart is designed to show one perspective on the massive growth of China's export economy in recent years; its index is over 700 in 2013, which means that China's export volume in this year is over seven times what it was in 2000.  By contrast, export volume in the United States only increased about 50 percent during the same period.  &lt;/p&gt;
&lt;p&gt;Dygraphs can also be produced in my other language of choice, Python, using the &lt;a href="https://github.com/DayStarEngineering/PyDyGraphs"&gt;PyDyGraphs module, available from GitHub.&lt;/a&gt;  The module allows you to create interactive dygraphs charts in your IPython Notebook session.  This module is also very user-friendly; download the &lt;code&gt;pydygraphs.py&lt;/code&gt; module from GitHub and run the code below in your IPython Notebook to produce a plot of aging over time in Italy, Spain, and the Netherlands.  This module is not as mature as the R package, however; I was unable to display the plot in &lt;a href="http://nbviewer.ipython.org/gist/walkerke/7d055b109a3f4b790127"&gt;nbviewer&lt;/a&gt;, although admittedly my knowledge of the Notebook's architecture is limited.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;wbdata&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;wb&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pydygraphs&lt;/span&gt;

&lt;span class="c"&gt;## First, fetch the data from the World Bank API&lt;/span&gt;

&lt;span class="n"&gt;over65ind&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;SP.POP.65UP.TO.ZS&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;pctover65&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;countries&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;IT&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;NL&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;ES&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;wb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_dataframe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;over65ind&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;country&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;countries&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data_date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1960&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2012&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reset_index&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c"&gt;## Now, reshape to wide format&lt;/span&gt;

&lt;span class="n"&gt;wide&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pivot_table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;pctover65&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;columns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;country&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reset_index&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;wide&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;wide&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;astype&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;## Finally, create the interactive plot!&lt;/span&gt;

&lt;span class="n"&gt;fig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pydygraphs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;figure&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;xaxis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;date&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plotDataFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wide&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;xaxis&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Percent of population over age 65&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xlabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Year&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ylabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Percent over 65&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Thanks are due, as always, to the RStudio team, Ramnath, and Kenton for their amazing work!&lt;/p&gt;</summary><category term="R"></category><category term="Python"></category><category term="World Regional"></category></entry><entry><title>Using Slidify to teach with interactive content</title><link href="http://walkerke.github.io/2014/12/slidify/" rel="alternate"></link><updated>2014-12-02T00:00:00-06:00</updated><author><name>Kyle Walker</name></author><id>tag:walkerke.github.io,2014-12-02:2014/12/slidify/</id><summary type="html">&lt;p&gt;I frequently come across criticisms of PowerPoint as a presentation tool, which is interesting to me given the ubiquity of its use across industries.  When I worked as a data analyst prior to coming to TCU, I frequently prepared PowerPoints using a company template for my boss's presentations or for talks of my own.  In academia, we have considerable freedom in how we can communicate information; however, PowerPoint is still widely used in the classroom and is everywhere at professional conferences.  &lt;/p&gt;
&lt;p&gt;The best-known criticisms of PowerPoint are from &lt;a href="http://users.ha.uth.gr/tgd/pt0501/09/Tufte.pdf"&gt;Edward Tufte&lt;/a&gt;; other notable examples include &lt;a href="http://www.slate.com/articles/life/education/2014/03/powerpoint_in_higher_education_is_ruining_teaching.html"&gt;Rebecca Schuman's critique of slideshows in higher education&lt;/a&gt;, and &lt;a href="http://www.philanthropydaily.com/jeff-bezos-powerpoint-prohibition/"&gt;Jeff Bezos' banishing of PowerPoint presentations from Amazon&lt;/a&gt;.  I personally don't believe that slideshows are &lt;em&gt;inherently&lt;/em&gt; bad; however, they can exacerbate bad presentation habits.  For example, slideshows with lots of text can serve as crutches for under-prepared presenters, who end up simply reading large quantities of bulleted text from their slides.  In the classroom, students respond to these types of slides by scrambling to copy down every last word from the slide (even if the slides will be provided to them afterward) instead of listening closely to what the instructor is saying.  &lt;/p&gt;
&lt;p&gt;I try to avoid putting too much text (or any at all) on my lecture slides for this reason.  However, I am hesitant to get rid of slideshows entirely, as some have suggested.  My field, geography, is intensely visual; in turn, images and data visualizations are often necessary to contextualize geographical concepts for students.  For example, I can discuss the development of informal settlements in African and Asian megacities - but without photographs, this discussion would remain abstract, as few of my students have ever been to these places in person.  Similarly, it is one thing to tell students that there are disparities in life expectancy between European and African countries; &lt;a href="http://tcugis.maps.arcgis.com/home/webmap/viewer.html?webmap=c9624225857a4f0089d19ac2bd727896"&gt;however, an interactive map (click the link for an example)&lt;/a&gt; can provide a direct reference for students, and allows us to explore the data in class.  &lt;/p&gt;
&lt;p&gt;I find slideshows useful for organizing this visual content.  However, it took me some time to figure out the best way to present interactive web-based visualizations to students.  When I started experimenting with interactive visualization last year, I would include a link in my PowerPoint to where the visualization was located on the web; however, this was less than ideal, as it would often interrupt the flow of our discussion.  This led me to seek out a purely web-based solution for my slides.  I came across &lt;a href="http://slidify.github.io"&gt;Slidify&lt;/a&gt;, an R package by &lt;a href="https://twitter.com/ramnath_vaidya"&gt;Ramnath Vaidyanathan&lt;/a&gt;.  With Slidify, I can write all of my slides in &lt;a href="http://www.rstudio.com/"&gt;RStudio&lt;/a&gt; with &lt;a href="http://rmarkdown.rstudio.com/"&gt;R Markdown&lt;/a&gt;, and embed interactive content in my slides, like any other graphic.  I now use Slidify to produce all of my lecture slides, and all of my presentation slides when possible.  Some sample content from my class on Japan is below; click within the slideshow, then use the arrow keys to move through the slides.  Please note: this is best viewed on a desktop computer rather than a mobile device.  &lt;a href="http://walkerke.github.io/teaching-with-datavis/japan-slidify/index.html#slide1"&gt;If you'd prefer to view the full-size slideshow, click here.&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;iframe id="frame" src="http://walkerke.github.io/teaching-with-datavis/japan-slidify/index.html#slide1" height="750" width="975" frameBorder = "0" scrolling = "no"&gt;&lt;/iframe&gt;

&lt;hr /&gt;
&lt;p&gt;In my opinion, embedding interactive content directly in the slide deck is a significant improvement over linking out to these graphics from a PowerPoint presentation, or having to navigate back and forth between a slideshow and a web browser.  For example, we spend a significant amount of time discussing aging and projected population decline in Japan.  I can show students how Japan's population is projected to decline by over 40 million by the end of the century with the interactive Plotly chart of population change over time, then put this in context with the population pyramid immediately afterward.  I then highlight using the pyramid's interactivity that Japan is projected to be home to 1.3 million people aged 100 and up in 2050, then go right back to the Plotly graph and use its interactivity to show that this would make centenarians over one percent of Japan's population.  I follow with an embedded YouTube video from &lt;a href="http://www.journeyman.tv/"&gt;Journeyman Pictures&lt;/a&gt; about demographic issues in Japan, and ask students to complete an in-class writeup in which they identify how the issues explored in the video help explain the demographic trends we've observed in the charts.  Rather than bouncing around from PowerPoint to YouTube to Plotly, I can do all of this in a much smoother way with Slidify.  &lt;/p&gt;
&lt;p&gt;Granted, HTML slides are not immune to the poor presentation behaviors that are often associated with PowerPoint; you can fill up these slides with lots of text as well if you so choose.  Additionally, a caveat is that internet access is required to leverage the full interactivity of this slide deck, which can be an issue in a professional setting.  For example, the last conference I attended did not have internet access; another presentation I gave a year ago had to be uploaded to a special presentation management system, and thus required PowerPoint.  However, I have been very pleased with Slidify thus far and will continue to use it in my teaching.  &lt;/p&gt;
&lt;p&gt;If you'd like to read onward, I've included some of the technical details of using interactive content in Slidify presentations below.  &lt;/p&gt;
&lt;h3&gt;Embedding interactive content in a Slidify presentation&lt;/h3&gt;
&lt;p&gt;Slidify allows users to produce HTML slides from Markdown for several different frameworks.  If you aren't familiar with Markdown, I encourage you to get acquainted with it; it allows you to convert a basic text formatting syntax to HTML, and is really useful.  &lt;a href="http://daringfireball.net/projects/markdown/"&gt;You can read more about Markdown here.&lt;/a&gt; My favorite frameworks are &lt;a href="https://github.com/adamzap/landslide"&gt;Landslide&lt;/a&gt; and &lt;a href="http://lab.hakim.se/reveal-js/#/"&gt;Reveal.JS&lt;/a&gt;.  The above presentation is created with Landslide, and uses some custom CSS I've specified for the styling. &lt;/p&gt;
&lt;p&gt;I'm not going to go into extensive detail on how to create a Slidify presentation; &lt;a href="http://zevross.com/blog/2014/11/19/creating-elegant-html-presentations-that-feature-r-code/"&gt;instead, I'm going to refer you to Zev Ross's excellent tutorial, which is linked here&lt;/a&gt; and goes over the ins-and-outs of setting up Slidify.  The R Markdown code that generated the slides &lt;a href="https://github.com/walkerke/teaching-with-datavis/tree/master/japan-slidify"&gt;is also available in its GitHub repository.&lt;/a&gt;  Instead, I'd like to discuss how to embed visuals in a Slidify presentation, such as static imagery, interactive visualizations, and video clips.  &lt;/p&gt;
&lt;p&gt;While Slidify allows you to avoid writing HTML/CSS/JavaScript for the most part, it is helpful to know a little bit of each to achieve its full functionality.  For me, Slidify has been a great way to learn about how webpages work.  Slide 3, which is a picture of Tokyo, is a picture I've found from a Google image search.  Standard Markdown syntax allows you to reference images; however, if you want more control over the size of your image, you'll want to turn to regular HTML.  The code for the slide is below: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;## Tokyo

&amp;lt;img src=assets/img/tokyo.jpg style=&amp;quot;width: 750px&amp;quot;&amp;gt;

&amp;lt;span class=&amp;quot;footnote&amp;quot;&amp;gt;Source: [maxisciences.com](http://img1.mxstatic.com/wallpapers/313ec7a690d40c8381ddff3cbf781e16_large.jpeg)&amp;lt;/span&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I've chosen to save the image in my &lt;code&gt;assets/img&lt;/code&gt; folder that is generated by Slidify; you could also reference it directly from the web.  To cite the image source in Slidify, you also can use HTML; put your text inside of &lt;code&gt;&amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;&lt;/code&gt; tags with the class &lt;code&gt;footnote&lt;/code&gt;.  However, I can use Markdown syntax within the HTML tags to reference a hyperlink, as I've done above.  In Markdown, links can be specified with brackets and parentheses like this: &lt;code&gt;[Name of link here](website of link)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The slides that follow include embedded interactive content.  Slide 4 shows a &lt;a href="http://en.wikipedia.org/wiki/Treemapping"&gt;tree map&lt;/a&gt; of Japan's exports by type from the excellent &lt;a href="http://atlas.media.mit.edu/"&gt;Observatory of Economic Complexity&lt;/a&gt;.  Slides 5 and 6 contain embedded charts that I've created; one is a &lt;a href="http://plot.ly"&gt;Plotly&lt;/a&gt; chart that shows past and projected future population change in Japan &lt;a href="http://walkerke.github.io/2014/05/tourism-plotly/"&gt;(see how to make charts like these here)&lt;/a&gt;, and the other is an interactive population pyramid for Japan's projected population structure in 2050 &lt;a href="http://walkerke.github.io/2014/06/rcharts-pyramids/"&gt;(read more on how to create these here)&lt;/a&gt;.  In each instance, these interactive graphics are embedded in my slideshow with HTML &lt;code&gt;&amp;lt;iframe&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/code&gt; tags.  An example of what this looks like for the Plotly chart is below.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;## Demography of Japan

&amp;lt;iframe src=&amp;quot;http://plot.ly/~walkerke/57&amp;quot; width=&amp;quot;800&amp;quot; height=&amp;quot;500&amp;quot; scrolling=&amp;quot;no&amp;quot; frameBorder=&amp;quot;0&amp;quot;&amp;gt;&amp;lt;/iframe&amp;gt;

&amp;lt;span class=&amp;quot;footnote&amp;quot;&amp;gt;Data source: United Nations&amp;lt;/span&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Both Plotly and the Observatory of Economic Complexity provide the HTML code for you to embed their hosted visualizations in your web page.   Other visualizations you've created yourself, like the population pyramid, will need to be hosted somewhere if they are not produced with a service like Plotly; &lt;a href="https://pages.github.com/"&gt;GitHub Pages&lt;/a&gt; is an excellent free option.  &lt;/p&gt;
&lt;p&gt;The last slide is an embedded clip from YouTube.  I'm a big advocate of showing short video clips in class to contextualize course content; embedding those clips within the slideshow allows for a smoother transition between class discussion and the video.  YouTube, and many other online video services, will provide you with the embed codes for the video.  &lt;/p&gt;
&lt;p&gt;The full R Markdown that generates the sample slideshow &lt;a href="https://raw.githubusercontent.com/walkerke/teaching-with-datavis/master/japan-slidify/index.Rmd"&gt;is available from this link&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Thanks to:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ramnath Vaidyanathan for authoring the Slidify and rCharts packages;&lt;/li&gt;
&lt;li&gt;Adam Zapletal, the creator of the Landslide presentation framework;&lt;/li&gt;
&lt;li&gt;Alexander Simoes (author of the Observatory of Economic Complexity), the Plotly team, and Journeyman Pictures.&lt;/li&gt;
&lt;/ul&gt;</summary><category term="R"></category><category term="Slidify"></category><category term="World Regional"></category><category term="presentations"></category></entry><entry><title>Life expectancy trends in the former USSR</title><link href="http://walkerke.github.io/2014/10/russia-lex/" rel="alternate"></link><updated>2014-10-16T00:00:00-05:00</updated><author><name>Kyle Walker</name></author><id>tag:walkerke.github.io,2014-10-16:2014/10/russia-lex/</id><summary type="html">&lt;p&gt;When covering Russia and the former republics of the USSR in World Regional Geography, a key part of my material addresses the issues that some of these countries have had in their transitions from centralized to market economies.  Some of these countries experienced dramatic demographic shifts after the dissolution of the USSR, including a noticeable decline in life expectancy.&lt;/p&gt;
&lt;p&gt;I'd been using some static Excel charts to illustrate life expectancy declines in Russia, Belarus, and Ukraine in previous courses.  However, I felt that an interactive solution would be preferable so that my students and I could explore the data in class over the course of our discussion.  I opted for &lt;a href="http://www.highcharts.com/"&gt;Highcharts&lt;/a&gt;, through R and &lt;a href="http://rcharts.io"&gt;rCharts&lt;/a&gt;, for the interactivity.  I then turned to &lt;a href="http://shiny.rstudio.com/"&gt;Shiny&lt;/a&gt; from &lt;a href="http://www.rstudio.com/"&gt;RStudio&lt;/a&gt; to put everything together.  &lt;/p&gt;
&lt;p&gt;Shiny is a framework that allows R users to turn analyses and visualizations into interactive applications.  Shiny can be run locally on your computer, or deployed to the web via the &lt;a href="https://www.shinyapps.io/"&gt;ShinyApps.io&lt;/a&gt; hosting service, which is currently free.  The beauty of Shiny is that it allows you to explore your data interactively with a friendly web-based user interface without writing any JavaScript, and it lets R users create and deploy apps to be shared with non-R users who may nonetheless be interested in exploring a dataset or visualization. &lt;a href="http://shiny.rstudio.com/gallery/"&gt;You can see RStudio's gallery of examples here.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To get started, I acquired data from &lt;a href="http://www.mortality.org/"&gt;The Human Mortality Database&lt;/a&gt;, (HMD) a project of UC Berkeley and the Max Planck Institute.  The HMD prefers that users not re-distribute the data, so if you'd like to reproduce this chart, you'll need to download the data yourself.  However, the service is free (with registration) and relatively simple to use.  The HMD provides mortality data for 37 countries, including Russia, Belarus, and Ukraine. From the HMD, I downloaded the 1-year life expectancy at birth tables for these countries, and saved them to my working directory as delimited text files, naming them accordingly.  Once I did this, I used the code below to process the data into a suitable format for visualization.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;library&lt;span class="p"&gt;(&lt;/span&gt;tidyr&lt;span class="p"&gt;)&lt;/span&gt;
library&lt;span class="p"&gt;(&lt;/span&gt;dplyr&lt;span class="p"&gt;)&lt;/span&gt;

russia &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; read.table&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;russia.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; skip &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

names&lt;span class="p"&gt;(&lt;/span&gt;russia&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; c&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Year&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Female&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Male&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Total&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

russia&lt;span class="o"&gt;$&lt;/span&gt;country &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Russia&amp;quot;&lt;/span&gt;

ukraine &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; read.table&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;ukraine.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; skip &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

names&lt;span class="p"&gt;(&lt;/span&gt;ukraine&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; c&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Year&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Female&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Male&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Total&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

ukraine&lt;span class="o"&gt;$&lt;/span&gt;country &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Ukraine&amp;quot;&lt;/span&gt;

belarus &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; read.table&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;belarus.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; skip &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

names&lt;span class="p"&gt;(&lt;/span&gt;belarus&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; c&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Year&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Female&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Male&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Total&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

belarus&lt;span class="o"&gt;$&lt;/span&gt;country &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Belarus&amp;quot;&lt;/span&gt;

dat &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; rbind&lt;span class="p"&gt;(&lt;/span&gt;russia&lt;span class="p"&gt;,&lt;/span&gt; ukraine&lt;span class="p"&gt;,&lt;/span&gt; belarus&lt;span class="p"&gt;)&lt;/span&gt;

dlong &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; dat &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;
  select&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;Total&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;
  gather&lt;span class="p"&gt;(&lt;/span&gt;Gender&lt;span class="p"&gt;,&lt;/span&gt; lex&lt;span class="p"&gt;,&lt;/span&gt; Female&lt;span class="o"&gt;:&lt;/span&gt;Male&lt;span class="p"&gt;)&lt;/span&gt;

write.csv&lt;span class="p"&gt;(&lt;/span&gt;dlong&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;data.csv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In a nutshell, the above code reads in each of the three text files, identifies the country the data correspond to, then combines them.  It then uses functions from the &lt;a href="http://cran.r-project.org/web/packages/dplyr/index.html"&gt;dplyr&lt;/a&gt; and &lt;a href="http://cran.r-project.org/web/packages/tidyr/index.html"&gt;tidyr&lt;/a&gt; packages to convert the data to "tidy" (long) format, which is what I want for visualization.  I then saved the data as a CSV and moved it to a new folder where I would create my Shiny app.  &lt;/p&gt;
&lt;p&gt;A Shiny app requires two files to run: &lt;strong&gt;server.R&lt;/strong&gt;, which specifies the data analysis/visualization to show, and &lt;strong&gt;ui.R&lt;/strong&gt;, in which you prepare the user interface.  An optional third file (which I haven't used here), &lt;strong&gt;global.R&lt;/strong&gt;, can be used to read in data or do any background data preparation that you want to make available to both the server and UI scripts.  I largely adapted my server and UI code from &lt;a href="http://shiny.rstudio.com/tutorial/"&gt;RStudio's Shiny tutorials&lt;/a&gt; and &lt;a href="http://ramnathv.github.io/rChartsShiny/"&gt;Ramnath Vaidyanathan's tutorial on using rCharts with Shiny&lt;/a&gt;, with some help from StackOverflow as well.  &lt;/p&gt;
&lt;p&gt;I prepared the UI first with the code below.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# ui.R&lt;/span&gt;

library&lt;span class="p"&gt;(&lt;/span&gt;rCharts&lt;span class="p"&gt;)&lt;/span&gt;

dat &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; read.csv&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;data.csv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Define UI &lt;/span&gt;
shinyUI&lt;span class="p"&gt;(&lt;/span&gt;fluidPage&lt;span class="p"&gt;(&lt;/span&gt;

  &lt;span class="c1"&gt;# Sidebar &lt;/span&gt;
  sidebarLayout&lt;span class="p"&gt;(&lt;/span&gt;
    sidebarPanel&lt;span class="p"&gt;(&lt;/span&gt;
      selectInput&lt;span class="p"&gt;(&lt;/span&gt;inputId &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;country&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                  label &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Select a country:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                  choices &lt;span class="o"&gt;=&lt;/span&gt; c&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Russia&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Belarus&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Ukraine&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
                  selected &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Russia&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
      sliderInput&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;range&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                  label &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Years to display:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                  min &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1959&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                  max &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;2010&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                  value &lt;span class="o"&gt;=&lt;/span&gt; c&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1959&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2010&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
                  format &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;0000&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
      helpText&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Data reflect the life expectancy &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                &lt;span class="s"&gt;&amp;quot;at birth from 1959 to 2010 &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
               &lt;span class="s"&gt;&amp;quot;for men and women in Russia, &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                &lt;span class="s"&gt;&amp;quot;Belarus, and Ukraine.  Data are &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
               &lt;span class="s"&gt;&amp;quot;obtained from the Human Mortality &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                &lt;span class="s"&gt;&amp;quot;Database, a project of &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                &lt;span class="s"&gt;&amp;quot; the University of California, &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                &lt;span class="s"&gt;&amp;quot;Berkeley (USA), and Max Planck &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                &lt;span class="s"&gt;&amp;quot;Institute for Demographic Research &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                &lt;span class="s"&gt;&amp;quot;(Germany). Data are available &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                &lt;span class="s"&gt;&amp;quot;at www.mortality.org or www.humanmortality.de &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
               &lt;span class="s"&gt;&amp;quot;(downloaded on 14 Oct 2014).&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;),&lt;/span&gt;

    &lt;span class="c1"&gt;# Show the plot &lt;/span&gt;
    mainPanel&lt;span class="p"&gt;(&lt;/span&gt;
      showOutput&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;lexplot&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;highcharts&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the &lt;strong&gt;ui.R&lt;/strong&gt; script, I define the parameters of the Shiny user interface.  I'll have a drop-down menu to select the country of choice (Russia, Belarus, or Ukraine), as well as a time slider that allows the user to specify the years to show in the chart.  I then use the &lt;code&gt;showOutput&lt;/code&gt; function from rCharts in the &lt;code&gt;mainPanel&lt;/code&gt; call to tell Shiny to show my chart in the main area.  &lt;/p&gt;
&lt;p&gt;Next, I set up the server.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# server.R&lt;/span&gt;

library&lt;span class="p"&gt;(&lt;/span&gt;rCharts&lt;span class="p"&gt;)&lt;/span&gt;

dat &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; read.csv&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;data.csv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

options&lt;span class="p"&gt;(&lt;/span&gt;RCHART_WIDTH &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;500&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

shinyServer&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;input&lt;span class="p"&gt;,&lt;/span&gt; output&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  output&lt;span class="o"&gt;$&lt;/span&gt;lexplot &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; renderChart2&lt;span class="p"&gt;({&lt;/span&gt;
    selected &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; input&lt;span class="o"&gt;$&lt;/span&gt;country
    country &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; subset&lt;span class="p"&gt;(&lt;/span&gt;dat&lt;span class="p"&gt;,&lt;/span&gt; country &lt;span class="o"&gt;==&lt;/span&gt; selected &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; Year &lt;span class="o"&gt;%in%&lt;/span&gt; seq&lt;span class="p"&gt;(&lt;/span&gt;input&lt;span class="o"&gt;$&lt;/span&gt;range&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; input&lt;span class="o"&gt;$&lt;/span&gt;range&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    h1 &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; hPlot&lt;span class="p"&gt;(&lt;/span&gt;
      x &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Year&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
      y &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;lex&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
      group &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Gender&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
      data &lt;span class="o"&gt;=&lt;/span&gt; country&lt;span class="p"&gt;,&lt;/span&gt; 
      type &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;line&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    h1&lt;span class="o"&gt;$&lt;/span&gt;colors&lt;span class="p"&gt;(&lt;/span&gt;c&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;red&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;blue&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    h1&lt;span class="o"&gt;$&lt;/span&gt;yAxis&lt;span class="p"&gt;(&lt;/span&gt;title &lt;span class="o"&gt;=&lt;/span&gt; list&lt;span class="p"&gt;(&lt;/span&gt;enabled &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; text &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Life expectancy at birth&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="kr"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;h1&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The key here to get this to work is to make sure that your &lt;strong&gt;server.R&lt;/strong&gt; and &lt;strong&gt;ui.R&lt;/strong&gt; scripts communicate correctly.  My UI takes an input that is dependent upon the country and years selected by the user, so I create a subsetted data frame, &lt;code&gt;country&lt;/code&gt;, within the &lt;code&gt;renderChart2&lt;/code&gt; function that will respond to that.  I then specify the parameters of the Highchart plot, and tell my &lt;code&gt;renderChart2&lt;/code&gt; function to return that plot and assign it to the &lt;code&gt;lexplot&lt;/code&gt; property of the output, which is what my user interface script will expect.  &lt;/p&gt;
&lt;p&gt;RStudio will know that you are creating a Shiny app (given the names of your scripts), so you can simply click the &lt;strong&gt;Run App&lt;/strong&gt; button to run your app locally, and then deploy it to ShinyApps if you'd like.  Now, let's take a look at the result.  Click the image below to access the application (I'm trying to cut down on my usage for my ShinyApps.io free account).  Use the drop-down menu to select a country, and the time slider to specify a range of years to display.   &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;a href="https://walkerke.shinyapps.io/lex_former_ussr/"&gt;&lt;img src=http://walkerke.github.io/img/russia_shiny.PNG&gt;&lt;/a&gt; &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;I now have an application that allows me to seamlessly switch between countries, change years, and explore the data thanks to Highcharts' built-in interactivity.  The charts reveal key trends in life expectancy both pre- and post- USSR.  In Russia, for example, we see that life expectancy declines through the mid-20th century, then peaks in the 1980s, &lt;a href="http://www.rand.org/pubs/conf_proceedings/CF124/cf124.chap4.html"&gt;which is attributed to Mikhail Gorbachev's anti-alcohol campaign.&lt;/a&gt;  Life expectancy then falls dramatically around the time that the USSR dissolved.  For example, male life expectancy in 1994 in Russia was a little over 57, around 7.5 years less than its peak in 1987.  &lt;a href="http://www.ncbi.nlm.nih.gov/pubmed/9508159"&gt;Studies have attributed this to a variety of factors, including alcohol abuse, poor nutrition and health behaviors, and problems with the health care system.&lt;/a&gt;  However, life expectancy improves in the late 2000s, &lt;a href="http://www.demographic-research.org/volumes/vol28/32/28-32.pdf"&gt;in part due to declines in cardiovascular disease and homicides&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;In class, I first presented the chart (which displays very nicely in a &lt;a href="http://ramnathv.github.io/slidify/"&gt;Slidify&lt;/a&gt; presentation) and explored the data with my students.  I then showed my students the first segment from the documentary &lt;a href="https://www.youtube.com/watch?v=J1OyIJtjdpo"&gt;Death of a Nation: Russia&lt;/a&gt; by Marcel Theroux which explores some of the underlying issues behind these demographic changes in more depth.  We then used the video to collectively think about some reasons for the decline of life expectancy in Russia after the fall of the USSR.  The video paired very nicely with the interactive Shiny app; the charts provided key visual demographic context, and the video then put faces to the data.  &lt;/p&gt;
&lt;p&gt;The app is fully reproducible (just make sure you download the data from &lt;a href="http://www.mortality.org"&gt;the Human Mortality Database&lt;/a&gt; first) and you can find the code in its &lt;a href="https://github.com/walkerke/teaching-with-datavis/tree/master/russia-lex"&gt;GitHub repository&lt;/a&gt;.  Feel free to use the app as you'd like, or modify the code as you wish to create your own apps!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Thanks to:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The creators of the Human Mortality Database for making their data freely available &lt;/li&gt;
&lt;li&gt;The &lt;a href="http://http://www.rstudio.com/"&gt;RStudio&lt;/a&gt; team for Shiny and all its associated training materials&lt;/li&gt;
&lt;li&gt;The developers of rCharts and Highcharts&lt;/li&gt;
&lt;/ul&gt;</summary><category term="R"></category><category term="rCharts"></category><category term="World Regional"></category><category term="Shiny"></category></entry><entry><title>Exploring the United Nations population projections with rCharts</title><link href="http://walkerke.github.io/2014/08/un-projections/" rel="alternate"></link><updated>2014-08-05T00:00:00-05:00</updated><author><name>Kyle Walker</name></author><id>tag:walkerke.github.io,2014-08-05:2014/08/un-projections/</id><summary type="html">&lt;p&gt;&lt;strong&gt;Please note: some NVD3 charts are performing very slowly in the latest version of Google Chrome at the moment; &lt;a href="https://github.com/novus/nvd3/issues/702"&gt;see this GitHub issue.&lt;/a&gt;  As such, this post is best viewed in other browsers.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I recently came across &lt;a href="http://dataremixed.com/2014/07/story-types-a-thought-starter/"&gt;this really interesting post&lt;/a&gt; from &lt;a href="https://twitter.com/DataRemixed"&gt;Ben Jones&lt;/a&gt; that explores the history and future of world population change with Tableau.  I haven't used Tableau much, but I was impressed with the different ways in which Ben used the software to visualize various aspects of global population change.  More broadly, I can see multiple ways in which a visualization like this would be useful in teaching a course like World Regional Geography.  An instructor could ask students to answer a series of questions regarding global population change, using the visualizations as their evidence.  Students would then report back to the class about what they've learned from the visualizations, presenting different views to support their answers to the questions.  &lt;/p&gt;
&lt;p&gt;Reading this post motivated me to share a couple more basic visualizations that I've used in my teaching to support discussions of global population change.  These are some of the first charts I created with &lt;a href="http://rcharts.io/"&gt;rCharts&lt;/a&gt; when I first started working with the package late last year.  However, I've updated the code below to use the new Hadley Wickham package &lt;a href="https://github.com/hadley/dplyr"&gt;dplyr&lt;/a&gt;, which makes data munging in R so much easier.  Eventually, I would like to create a &lt;a href="http://shiny.rstudio.com/"&gt;Shiny&lt;/a&gt; application that is similar to what Ben created with Tableau, but instead using R and rCharts.  &lt;/p&gt;
&lt;p&gt;In the examples below, I use population projection data from &lt;a href="http://esa.un.org/wpp/"&gt;the United Nations' World Population Prospects, 2012 Revision&lt;/a&gt;.  I create the visualizations with &lt;a href="http://nvd3.org/"&gt;NVD3&lt;/a&gt;.  The first example is a stacked area chart that shows the changing regional distribution of the world's population between 1950 and 2100.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;library&lt;span class="p"&gt;(&lt;/span&gt;dplyr&lt;span class="p"&gt;)&lt;/span&gt;
library&lt;span class="p"&gt;(&lt;/span&gt;rCharts&lt;span class="p"&gt;)&lt;/span&gt;
library&lt;span class="p"&gt;(&lt;/span&gt;RColorBrewer&lt;span class="p"&gt;)&lt;/span&gt;

dat &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; read.csv&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://esa.un.org/wpp/ASCII-Data/ASCII_FILES/WPP2012_DB02_POPULATIONS_ANNUAL.csv&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;## Alternatively, download the file from the above link and save it in your working directory&lt;/span&gt;

&lt;span class="c1"&gt;# library(data.table)&lt;/span&gt;
&lt;span class="c1"&gt;# dat &amp;lt;- fread(&amp;quot;WPP2012_DB02_POPULATIONS_ANNUAL.csv&amp;quot;)&lt;/span&gt;

regions &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; c&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Africa&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Latin America and the Caribbean&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Northern America&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Europe&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Oceania&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Asia&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

region_dat &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; dat &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;
  filter&lt;span class="p"&gt;(&lt;/span&gt;VarID &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
         Location &lt;span class="o"&gt;%in%&lt;/span&gt; regions&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;
  mutate&lt;span class="p"&gt;(&lt;/span&gt;billions &lt;span class="o"&gt;=&lt;/span&gt; PopTotal &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="m"&gt;1000000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;
  select&lt;span class="p"&gt;(&lt;/span&gt;Location&lt;span class="p"&gt;,&lt;/span&gt; Time&lt;span class="p"&gt;,&lt;/span&gt; billions&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Stacked area chart by region&lt;/span&gt;

c1 &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; nPlot&lt;span class="p"&gt;(&lt;/span&gt;billions &lt;span class="o"&gt;~&lt;/span&gt; Time&lt;span class="p"&gt;,&lt;/span&gt; 
            group &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Location&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
            data &lt;span class="o"&gt;=&lt;/span&gt; region_dat&lt;span class="p"&gt;,&lt;/span&gt; 
            type &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;stackedAreaChart&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

c1&lt;span class="o"&gt;$&lt;/span&gt;chart&lt;span class="p"&gt;(&lt;/span&gt;color &lt;span class="o"&gt;=&lt;/span&gt; brewer.pal&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Set2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
c1&lt;span class="o"&gt;$&lt;/span&gt;yAxis&lt;span class="p"&gt;(&lt;/span&gt;tickFormat&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;#!d3.format(&amp;#39;,.1f&amp;#39;)!#&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
c1&lt;span class="o"&gt;$&lt;/span&gt;yAxis&lt;span class="p"&gt;(&lt;/span&gt;axisLabel &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Population (billions)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; width &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;62&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
c1&lt;span class="o"&gt;$&lt;/span&gt;xAxis&lt;span class="p"&gt;(&lt;/span&gt;axisLabel &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Year&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

c1&lt;span class="o"&gt;$&lt;/span&gt;chart&lt;span class="p"&gt;(&lt;/span&gt;tooltipContent &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;#! function(key, x, y){&lt;/span&gt;
&lt;span class="s"&gt;        return &amp;#39;&amp;lt;h3&amp;gt;&amp;#39; + key + &amp;#39;&amp;lt;/h3&amp;gt;&amp;#39; + &lt;/span&gt;
&lt;span class="s"&gt;        &amp;#39;&amp;lt;p&amp;gt;&amp;#39; + y + &amp;#39; billion in &amp;#39; + x + &amp;#39;&amp;lt;/p&amp;gt;&amp;#39;&lt;/span&gt;
&lt;span class="s"&gt;        } !#&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The above code reads the data file directly into R from the UN's website; however this can be slow (about a couple minutes) so if you'd prefer, I'd advise downloading the CSV to your working directory and using &lt;code&gt;fread&lt;/code&gt; from the &lt;strong&gt;data.table&lt;/strong&gt; package to read it in (&lt;a href="http://r.789695.n4.nabble.com/Odd-problem-using-fread-to-read-in-a-csv-file-no-data-just-headers-td4686302.html"&gt;there is an issue with using &lt;code&gt;fread&lt;/code&gt; to read CSVs from websites on Windows&lt;/a&gt;).  I then subset the data into a new data frame, &lt;code&gt;region_dat&lt;/code&gt;, using &lt;strong&gt;dplyr&lt;/strong&gt;.  If you are unfamiliar with dplyr, I highly recommend that you check it out; &lt;a href="http://rpubs.com/walkerke/ipums_dplyr"&gt;I have written about other use cases for dplyr here&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;The remaining code creates the NVD3 chart with rCharts. Notice that when working with rCharts, you sometimes have to pass in JavaScript directly to modify the chart options, which is enclosed in &lt;code&gt;"#!...!#"&lt;/code&gt;.  I do this when formatting the y-axis values as well as the content of the tooltip.  Notice that &lt;code&gt;key&lt;/code&gt; refers to the group value, &lt;code&gt;y&lt;/code&gt; is the y-axis value, and &lt;code&gt;x&lt;/code&gt; is the x-axis value in the JavaScript function.  You can also pass in other values to the tooltip with NVD3; &lt;a href="https://gist.github.com/walkerke/11002398"&gt;I show how in this GitHub gist&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;Typing &lt;code&gt;c1&lt;/code&gt; in the console then produces the chart below: &lt;/p&gt;
&lt;iframe src="http://walkerke.github.io/teaching-with-datavis/un-projections/regions.html" width="850" height="400" seamless scrolling="no" frameBorder = "0"&gt;&lt;/iframe&gt;

&lt;p&gt;I used this chart during the first week of my World Regional Geography class to discuss population change in global context.  The region that stands out, of course, is Africa, which is projected to almost-quadruple in population by the end of century.  If these projections pan out, Africa would have over 4 billion residents by 2100, and account for around 40 percent of the world's population.  The interactivity in the chart then allows for more detailed exploration of the data.  By clicking on the Europe data series, for example, the user can hide all of the other regions, and show how the continent's population is projected to peak in the next several years and then begin to decline.  These figures provided important context to many of the thematic topics specific to these regions I covered later in the class.  Additionally, the chart can be modified with a single click to a "Stream" or "Expanded" 100% view (try it!), for different views of the data. &lt;/p&gt;
&lt;p&gt;I also created another visualization to show UN projections for the world's population based on different projection scenarios.  The code and resultant chart are below.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;variants &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; c&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Low&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Medium&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;High&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Constant fertility&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

global_dat &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; dat &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;
  filter&lt;span class="p"&gt;(&lt;/span&gt;Location &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;World&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
         Variant &lt;span class="o"&gt;%in%&lt;/span&gt; variants&lt;span class="p"&gt;,&lt;/span&gt;
         Time &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="m"&gt;2012&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;
  mutate&lt;span class="p"&gt;(&lt;/span&gt;varfactor &lt;span class="o"&gt;=&lt;/span&gt; factor&lt;span class="p"&gt;(&lt;/span&gt;Variant&lt;span class="p"&gt;,&lt;/span&gt;
                            levels &lt;span class="o"&gt;=&lt;/span&gt; c&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Constant fertility&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                       &lt;span class="s"&gt;&amp;quot;High&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                       &lt;span class="s"&gt;&amp;quot;Medium&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                       &lt;span class="s"&gt;&amp;quot;Low&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; 
         billions &lt;span class="o"&gt;=&lt;/span&gt; PopTotal &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="m"&gt;1000000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;
  select&lt;span class="p"&gt;(&lt;/span&gt;varfactor&lt;span class="p"&gt;,&lt;/span&gt; Time&lt;span class="p"&gt;,&lt;/span&gt; billions&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;
  arrange&lt;span class="p"&gt;(&lt;/span&gt;varfactor&lt;span class="p"&gt;)&lt;/span&gt;

c2 &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; nPlot&lt;span class="p"&gt;(&lt;/span&gt;billions &lt;span class="o"&gt;~&lt;/span&gt; Time&lt;span class="p"&gt;,&lt;/span&gt; 
            group &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;varfactor&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
            data &lt;span class="o"&gt;=&lt;/span&gt; global_dat&lt;span class="p"&gt;,&lt;/span&gt; 
            type&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;lineChart&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

c2&lt;span class="o"&gt;$&lt;/span&gt;chart&lt;span class="p"&gt;(&lt;/span&gt;color &lt;span class="o"&gt;=&lt;/span&gt; brewer.pal&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Set2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
c2&lt;span class="o"&gt;$&lt;/span&gt;yAxis&lt;span class="p"&gt;(&lt;/span&gt;tickFormat&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;#!d3.format(&amp;#39;,.1f&amp;#39;)!#&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
c2&lt;span class="o"&gt;$&lt;/span&gt;yAxis&lt;span class="p"&gt;(&lt;/span&gt;axisLabel &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Population (billions)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; width &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;62&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
c2&lt;span class="o"&gt;$&lt;/span&gt;xAxis&lt;span class="p"&gt;(&lt;/span&gt;axisLabel &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Year&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


c2&lt;span class="o"&gt;$&lt;/span&gt;chart&lt;span class="p"&gt;(&lt;/span&gt;tooltipContent &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;#! function(key, x, y){&lt;/span&gt;
&lt;span class="s"&gt;        return &amp;#39;&amp;lt;h3&amp;gt;&amp;#39; + &amp;#39;Variant: &amp;#39; + key + &amp;#39;&amp;lt;/h3&amp;gt;&amp;#39; + &lt;/span&gt;
&lt;span class="s"&gt;        &amp;#39;&amp;lt;p&amp;gt;&amp;#39; + y + &amp;#39; billion in &amp;#39; + x + &amp;#39;&amp;lt;/p&amp;gt;&amp;#39;&lt;/span&gt;
&lt;span class="s"&gt;        } !#&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
c2
&lt;/pre&gt;&lt;/div&gt;


&lt;iframe src="http://walkerke.github.io/teaching-with-datavis/un-projections/global.html" width="850" height="400" seamless scrolling="no" frameBorder = "0"&gt;&lt;/iframe&gt;

&lt;p&gt;The chart shows wide disparities between the UN's projection scenarios.  If global fertility were to remain at 2012 levels, the world's population would be expected to reach nearly 28 billion by the end of the century!  However, any reasonable projection scenarios take into account global declines in fertility.  While the annual rate of world population growth has been declining for several decades, &lt;a href="http://en.wikipedia.org/wiki/Demographic_momentum"&gt;demographic momentum&lt;/a&gt; is projected to carry the world's population to close to 11 billion by 2100, according to the most commonly-cited Medium projection variant.  However, it is notable that if global fertility were to decline more than expected, the world's population could peak in size and then decline over the next century.  This is shown by the Low variant, which is calculated with a fertility rate half a child lower than the medium variant.  If you are interested in learning more about the UN's projections and methodology, &lt;a href="http://esa.un.org/wpp/Documentation/pdf/WPP2012_HIGHLIGHTS.pdf"&gt;read their report here&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;The UN population projection dataset contains a lot more information than just this, however.  Projections are included for every country, and other files are available with additional demographic information &lt;a href="http://esa.un.org/wpp/ASCII-Data/DISK_NAVIGATION_ASCII.htm"&gt;at the UN's website&lt;/a&gt;.  As such, there are many other ways to visualize these data; I envision a Shiny application in which the user could interactively select countries and compare projection scenarios. &lt;/p&gt;
&lt;p&gt;You are welcome to use these visualizations if you'd like, or feel free to &lt;a href="https://github.com/walkerke/teaching-with-datavis/blob/master/un-projections/un-projections.R"&gt;get the code from GitHub&lt;/a&gt; and build on this.  If you do, I'd love to hear about what you've created!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Thanks to:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The UN Population Division for making all their data freely and publicly available;&lt;/li&gt;
&lt;li&gt;The developers of rCharts and dplyr&lt;/li&gt;
&lt;/ul&gt;</summary><category term="R"></category><category term="rCharts"></category><category term="World Regional"></category></entry><entry><title>Interactive international population pyramids with R, rCharts</title><link href="http://walkerke.github.io/2014/06/rcharts-pyramids/" rel="alternate"></link><updated>2014-06-07T00:00:00-05:00</updated><author><name>Kyle Walker</name></author><id>tag:walkerke.github.io,2014-06-07:2014/06/rcharts-pyramids/</id><summary type="html">&lt;p&gt;I find population pyramids to be very effective teaching tools.  In short, a population pyramid is a type of chart that shows the population size of different age cohorts on the x-axis, with gender usually displayed back-to-back to create the shape of a "pyramid."  It is used to illustrate a snapshot of the age and sex structure of a population, and can serve as a tool that aids in discussion of many thematic issues such as population growth, aging, and gender imbalance.  The visually appealing structure of the population pyramid also makes it easy to compare the population structures of different countries, which is why I like to use pyramids in my classes.  This is exemplified by &lt;a href="http://blogs.worldbank.org/futuredevelopment/end-population-pyramid"&gt;this post from the World Bank&lt;/a&gt;, which shows how different "shapes" of the pyramid reflect different demographic contexts.  &lt;/p&gt;
&lt;p&gt;I was originally motivated to learn interactive visualization to produce interactive population pyramids.  My inspiration came from these examples from &lt;a href="http://vis.stanford.edu/jheer/d3/pyramid/shift.html"&gt;Jeff Heer&lt;/a&gt; and &lt;a href="http://bl.ocks.org/mbostock/4062085"&gt;Mike Bostock&lt;/a&gt;, which use data from the U.S. Census.  Since then, a number of other creative interactive population pyramid applications have gotten a lot of attention, such as &lt;a href="http://populationpyramid.net/"&gt;this visualization from Martin De Wulf&lt;/a&gt;, and &lt;a href="http://www.nytimes.com/2014/05/13/upshot/a-changing-shape-in-americas-age-distribution.html?rref=upshot&amp;amp;_r=1"&gt;this animated graphic from the Pew Research Center&lt;/a&gt;, referenced in &lt;em&gt;The New York Times'&lt;/em&gt; Upshot.  &lt;/p&gt;
&lt;p&gt;These are all great resources, but I wanted something both re-usable and customizable so that I could embed interactive pyramids for any country I needed in my slide decks for my World Regional Geography course.  To do this, I turned to the fantastic &lt;a href="http://www.census.gov/population/international/data/idb/informationGateway.php"&gt;International Data Base from the US Census Bureau&lt;/a&gt; for data, and the amazing &lt;a href="http://rcharts.io"&gt;rCharts&lt;/a&gt; to create the pyramids.  The Census Bureau's International Data Base contains a tremendous amount of information about basic demographic characteristics of the world's countries, and is easily downloaded; I've had students use it before to create their own population pyramids in Excel for class assignments.  However, as I wanted quick access to the data to in turn create interactive rCharts visualizations, I wrote a script, &lt;code&gt;rcharts_pyramids.R&lt;/code&gt;, that includes functions to scrape the Data Base website and produce an interactive pyramid with R within seconds.  &lt;/p&gt;
&lt;p&gt;Below, I'll discuss how to use the script.  I'd like anyone to be able to use this, regardless of their background with R; as such, I'm going to go easy on the technical details.  I'll follow up with another more code-heavy post, and &lt;a href="https://github.com/walkerke/teaching-with-datavis/blob/master/pyramids/rcharts_pyramids.R"&gt;the code is available on GitHub here&lt;/a&gt;.  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;To get started, make sure you have the following R packages installed: &lt;strong&gt;XML&lt;/strong&gt;, &lt;strong&gt;reshape2&lt;/strong&gt;, &lt;strong&gt;rCharts&lt;/strong&gt;, and &lt;strong&gt;plyr&lt;/strong&gt;.  &lt;strong&gt;rCharts&lt;/strong&gt; is not on CRAN, so you'll need to install it from GitHub with the &lt;strong&gt;devtools&lt;/strong&gt; package.  This script requires the &lt;code&gt;dev&lt;/code&gt; branch of &lt;strong&gt;rCharts&lt;/strong&gt;.  If you are just getting started with R, install the packages with the code below.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;install.packages&lt;span class="p"&gt;(&lt;/span&gt;c&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;XML&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;reshape2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;devtools&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;plyr&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
library&lt;span class="p"&gt;(&lt;/span&gt;devtools&lt;span class="p"&gt;)&lt;/span&gt;
install_github&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;ramnathv/rCharts@dev&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once these packages are installed, you are ready to get started.  If you are using &lt;a href="http://www.rstudio.com/"&gt;RStudio&lt;/a&gt; (which I strongly recommend), simply enter the following command into the R Console: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;source&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;https://raw.githubusercontent.com/walkerke/teaching-with-datavis/master/pyramids/rcharts_pyramids.R&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you are not using RStudio, use &lt;code&gt;source_url&lt;/code&gt; from the &lt;strong&gt;devtools&lt;/strong&gt; package instead of &lt;code&gt;source&lt;/code&gt;.  Alternatively, you can get the script from GitHub yourself and load it.&lt;/p&gt;
&lt;p&gt;The script contains four functions: &lt;code&gt;getAgeTable&lt;/code&gt;, &lt;code&gt;dPyramid&lt;/code&gt;, &lt;code&gt;hPyramid&lt;/code&gt;, and &lt;code&gt;nPyramid&lt;/code&gt;.  &lt;code&gt;getAgeTable&lt;/code&gt; is a helper function that uses the &lt;strong&gt;XML&lt;/strong&gt; package to scrape data from the International Data Base and convert it into an R data frame.  I pull data from the category "Mid-year Population by Five Year Age Groups and Sex" to create the pyramids.  The other three functions are used to create population pyramids from the data with different JavaScript libraries available through &lt;strong&gt;rCharts&lt;/strong&gt;.  Each function has three parameters:  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;country&lt;/code&gt; (required): the FIPS 10-4 country code for your country of interest.  You can find the codes from &lt;a href="http://en.wikipedia.org/wiki/List_of_FIPS_country_codes"&gt;this Wikipedia page&lt;/a&gt;, or use the &lt;a href="https://github.com/vincentarelbundock/countrycode"&gt;&lt;strong&gt;countrycode&lt;/strong&gt; R package&lt;/a&gt;.  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;year&lt;/code&gt; (required): The year for which you want to make the pyramid.  The Data Base includes historical information going back to 1950, and projected counts up to 2050 &lt;a href="http://www.census.gov/population/international/data/idb/informationGateway.php"&gt;see this link for the Census Bureau's projection methodology&lt;/a&gt;.  Not all years are available for all countries, however.  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;colors&lt;/code&gt; (optional): A vector of length 2 that contains the colors you want to use for your pyramid.  If you leave this argument blank, you'll get the default colors for your pyramid.  &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now, let's see how this works!  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;The first example I'll show you is &lt;code&gt;nPyramid&lt;/code&gt;, which uses the &lt;a href="http://nvd3.org/"&gt;NVD3.js library&lt;/a&gt;, which is built on top of D3.  I'm going to create a population pyramid for Qatar in 2014.  I spend a fair amount of time talking about Qatar in my course, as it exemplifies many of the topics we cover such as economic inequality, energy and economic growth, and international labor migration.  In fact, &lt;a href="http://www.pewsocialtrends.org/2013/12/17/migration-tables/"&gt;around three-quarters of Qatar's population is foreign-born&lt;/a&gt;; further, &lt;a href="http://espn.go.com/video/clip?id=11019010&amp;amp;categoryid=2378529"&gt;the conditions endured by migrant laborers in Qatar are attracting international attention in the run-up to the 2022 World Cup&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;To create the visualization, simply type the following command into your R console: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;nPyramid&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;QA&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2014&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; colors &lt;span class="o"&gt;=&lt;/span&gt; c&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;darkred&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;silver&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Which produces the chart below. I have trouble with NVD3 in the RStudio viewer, so you may need to open it in a web browser if you are using RStudio.  &lt;/p&gt;
&lt;iframe src="http://walkerke.github.io/teaching-with-datavis/pyramids/qatar.html" width="850" height="400" seamless scrolling="no" frameBorder = "0"&gt;&lt;/iframe&gt;

&lt;p&gt;The pyramid is striking for the dramatic gender imbalance in Qatar introduced by the influx of foreign laborers to the country.  Males aged 30-34 number nearly 300,000; this is over four times the number of females in that age category, who number just over 70,000.  Admittedly, population pyramids like this can be problematic for making gender comparisons (&lt;a href="http://bl.ocks.org/mbostock/4062085"&gt;Mike Bostock argues as much here&lt;/a&gt;), but this is allayed somewhat when using these pyramids interactively, as the visualizations produce a tooltip on hover that returns the precise population count for the age cohort, allowing for comparisons of the numbers.  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;The next example comes from &lt;a href="http://www.highcharts.com/"&gt;Highcharts&lt;/a&gt;, an interactive JavaScript charting library that includes many different examples and is very well-documented.  I'm going to use Highcharts here to create an interactive population pyramid for Japan in 2050 with the &lt;code&gt;hPyramid&lt;/code&gt; function.  In class, we discussed the &lt;a href="http://www.economist.com/news/asia/21603076-first-time-proper-debate-starting-about-immigration-incredible-shrinking-country?spc=scode&amp;amp;spv=xm&amp;amp;ah=9d7f7ab945510a56fa6d37c30b6f1709"&gt;challenges Japan is facing as its population ages&lt;/a&gt;; this population pyramid provided important visual context.  To create the chart, use the code below: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;hPyramid&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;JA&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2050&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; colors &lt;span class="o"&gt;=&lt;/span&gt; c&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;blue&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;red&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;iframe src="http://walkerke.github.io/teaching-with-datavis/pyramids/japan2050.html" width="850" height="400" seamless scrolling="no" frameBorder = "0"&gt;&lt;/iframe&gt;

&lt;p&gt;Japan's projected population structure in 2050 exemplifies an "inverted" population pyramid, with the oldest age cohorts comprising the largest proportions of the population, and the youngest the smallest.  There are many reasons why this is projected to happen in Japan, including high life expectancy, restrictive immigration policies, and declining marriage rates (contributing to low fertility levels).  In turn, Japan's shrinking workforce will have to provide for an increasingly large elderly population, which is illustrated in the chart.  As with the NVD3 pyramid, the chart gives a tooltip on mouseover that returns specific population figures.  One of the most striking features of the pyramid this reveals is the population of female centenarians (people aged 100+), which is projected to exceed 1 million by 2050 as per the Census Bureau.  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;The last example I'll show you is &lt;code&gt;dPyramid&lt;/code&gt;, which uses the &lt;a href="http://dimplejs.org/"&gt;DimpleJS&lt;/a&gt; library, built on top of D3.  &lt;code&gt;dPyramid&lt;/code&gt; works in much the same way as the other functions, but has the added bonus of being able to take advantage of Dimple's &lt;code&gt;storyboard&lt;/code&gt; property, which facilitates the creation of temporal animations.  As such, &lt;code&gt;dPyramid&lt;/code&gt; accepts a vector of years for the &lt;code&gt;year&lt;/code&gt; parameter; if you choose multiple years instead of a single year, &lt;code&gt;dPyramid&lt;/code&gt; will give you a population pyramid that changes over time.  Here's an example that shows the aging of Germany's population between 2000 and 2050.  If you are new to R, the &lt;code&gt;seq&lt;/code&gt; function returns a sequence of numbers from argument 1 (in this case, the year 2000), to argument 2 (2050), in intervals of argument 3 (every 10 years).   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;dPyramid&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;GM&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; seq&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2050&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; colors &lt;span class="o"&gt;=&lt;/span&gt; c&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;black&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;red&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;iframe src="http://walkerke.github.io/teaching-with-datavis/pyramids/germany.html" width="850" height="425" seamless scrolling="no" frameBorder = "0"&gt;&lt;/iframe&gt;

&lt;p&gt;The animation does a compelling job of showing how Germany's population is projected to both age and shrink in the years ahead.  Animation can also be used to provide demographic context to key historical circumstances I teach about in class.  For example, I covered the devastation wrought by the &lt;a href="http://www.aljazeera.com/indepth/features/2012/02/20122314155454169.html"&gt;Khmer Rouge&lt;/a&gt; during the Cambodian genocide, and used the animated population pyramid below to illustrate the demographic impacts of the genocide. The chart covers 1974 to 1982, the time just before, during, and in the years following the Khmer Rouge.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;dPyramid&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;CB&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; seq&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1974&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1982&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;iframe src="http://walkerke.github.io/teaching-with-datavis/pyramids/cambodia.html" width="850" height="425" seamless scrolling="no" frameBorder = "0"&gt;&lt;/iframe&gt;

&lt;p&gt;You can see how the bars shrink between 1975 and 1979, the years when Cambodia was ruled by the Khmer Rouge.  I could see the shock on some of my students' faces when I showed this to them - many of them were unfamiliar with the history of Cambodia and the Khmer Rouge.  The visualization shows an overall decline in population of around 900,000 between 1974 and 1979, which reflects official population numbers; this likely underestimates the scale of the atrocities in Cambodia (&lt;a href="http://www.yale.edu/gsp/publications/KiernanRevised1.pdf"&gt;see the article linked here&lt;/a&gt;), as the actual losses may have been twice that.  &lt;/p&gt;
&lt;p&gt;To save any of your pyramids as a standalone HTML document, just assign your pyramid to a variable and use rCharts' &lt;code&gt;save&lt;/code&gt; option to save your chart, setting the &lt;code&gt;cdn&lt;/code&gt; parameter to &lt;code&gt;TRUE&lt;/code&gt;.  The code below provides an example of how to save the html file in your working directory.    &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;q1 &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; nPyramid&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;QA&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2014&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; colors &lt;span class="o"&gt;=&lt;/span&gt; c&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;darkred&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;silver&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
q1&lt;span class="o"&gt;$&lt;/span&gt;save&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;qatar.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; cdn &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;p&gt;I've learned a lot about rCharts as I've put these together; my next post will cover how these charts are created.  In the meantime, have a look at the &lt;a href="https://github.com/walkerke/teaching-with-datavis/blob/master/pyramids/rcharts_pyramids.R"&gt;code on GitHub&lt;/a&gt;; you are welcome to use and modify it as you please.  I'd love to hear your comments or feedback; you can contact me at &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#107;&amp;#121;&amp;#108;&amp;#101;&amp;#46;&amp;#119;&amp;#97;&amp;#108;&amp;#107;&amp;#101;&amp;#114;&amp;#64;&amp;#116;&amp;#99;&amp;#117;&amp;#46;&amp;#101;&amp;#100;&amp;#117;"&gt;&amp;#107;&amp;#121;&amp;#108;&amp;#101;&amp;#46;&amp;#119;&amp;#97;&amp;#108;&amp;#107;&amp;#101;&amp;#114;&amp;#64;&amp;#116;&amp;#99;&amp;#117;&amp;#46;&amp;#101;&amp;#100;&amp;#117;&lt;/a&gt; or get in touch with me on &lt;a href="https://twitter.com/kyle_e_walker"&gt;Twitter&lt;/a&gt;.    &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Thanks to:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/ramnath_vaidya"&gt;Ramnath Vaidyanathan&lt;/a&gt;, &lt;a href="https://twitter.com/timelyportfolio"&gt;Timely Portfolio&lt;/a&gt;, and &lt;a href="https://twitter.com/jkiernander"&gt;John Kiernander&lt;/a&gt; for their incredible contributions that make this all possible - and for helping me out with some Dimple formatting issues;&lt;/li&gt;
&lt;li&gt;The authors of the NVD3, D3, and Highcharts JavaScript libraries;&lt;/li&gt;
&lt;li&gt;The US Census Bureau for making the International Data Base such a valuable resource.   &lt;/li&gt;
&lt;/ul&gt;</summary><category term="R"></category><category term="rCharts"></category><category term="World Regional"></category></entry><entry><title>Visualizing the economics of tourism in the Pacific with Plotly</title><link href="http://walkerke.github.io/2014/05/tourism-plotly/" rel="alternate"></link><updated>2014-05-12T00:00:00-05:00</updated><author><name>Kyle Walker</name></author><id>tag:walkerke.github.io,2014-05-12:2014/05/tourism-plotly/</id><summary type="html">&lt;p&gt;Over the last month or so, I've been working a lot with &lt;a href="http://plot.ly"&gt;Plotly&lt;/a&gt; to visualize data for my World Regional Geography course.  Plotly is a web-based service that allows for the creation of interactive, D3-based visualizations that can be easily shared.  Visualizations are deployed and hosted on Plotly's servers, so the service requires a connection to the internet to work.  One of the great things about Plotly is that it has APIs for popular data programming languages like &lt;a href="http://plot.ly/r/"&gt;R&lt;/a&gt;, &lt;a href="http://plot.ly/python/"&gt;Python&lt;/a&gt;, and &lt;a href="http://plot.ly/julia/"&gt;Julia&lt;/a&gt;.  I really got hooked on Plotly, however, when I learned about &lt;code&gt;ggplotly&lt;/code&gt;, &lt;a href="http://ropensci.org/blog/2014/04/17/plotly/"&gt;which allows you to convert &lt;strong&gt;ggplot2&lt;/strong&gt; graphs in R to interactive Plotly charts with just a couple extra lines of code&lt;/a&gt;.   I'm going to go over an example of how I used &lt;code&gt;ggplotly&lt;/code&gt; to assist with a discussion of the economic significance of tourism in the Pacific.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;In my final class of the semester, I focused on Oceania (defined as Australia, New Zealand, and Pacific Island nations).  In this class, I wanted to show students how small, relatively isolated countries in the Pacific can be acutely affected by larger global forces.  We focused on topics such as trash accumulation in the Pacific, sea level rise due to climate change, and the ways in which island countries are connected to the global economy.  As part of this, we discussed the role of tourism in Pacific Island economies.  To help illustrate this to my students, I sought out data on the tourist economies of these countries, which is freely available from the &lt;a href="http://www.wttc.org/research/economic-data-search-tool/"&gt;World Travel &amp;amp; Tourism Council's Economic Data Search Tool&lt;/a&gt;.  To download the data, I followed these steps: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;For Step 1 of the search tool, I clicked &lt;strong&gt;Countries &amp;gt; Oceania&lt;/strong&gt;, then selected Fiji, Kiribati, Other Oceania, Solomon Islands, Tonga, and Vanuatu.  &lt;/li&gt;
&lt;li&gt;For Step 2, I selected "Travel &amp;amp; Tourism Total Contribution to GDP."  These figures include both tourism's direct contributions to GDP (e.g. GDP generated by hotels, airlines, etc.) and its indirect contributions to the economy; &lt;a href="http://www.wttc.org/site_media/uploads/downloads/oceania2014.pdf"&gt;see this report for more details&lt;/a&gt;.  &lt;/li&gt;
&lt;li&gt;For Step 3, I selected "% share" as my unit, as I was interested in the extent to which tourism figures in the overall constitution of these countries' economies.  &lt;/li&gt;
&lt;li&gt;I chose the entire date range from 1988 to 2024 (projected), and clicked &lt;strong&gt;Submit&lt;/strong&gt;.  &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The data can then be downloaded as an Excel file.  However, the Excel file is formatted in a way that resembles the HTML on the web page, and as such is not in the "tidy" format that is required for visualization in ggplot2.  As such, I saved the file as a CSV (which is available from my GitHub repository) and imported the data into R for some cleaning.  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;The R code below shows one way to clean up data downloaded from the WTTC in this particular format (multiple countries, one variable).  I've written a function, &lt;code&gt;tidy_WTTC&lt;/code&gt;, that should work for any dataset in this form available from the WTTC.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# Load packages and data&lt;/span&gt;

library&lt;span class="p"&gt;(&lt;/span&gt;reshape2&lt;span class="p"&gt;)&lt;/span&gt;
library&lt;span class="p"&gt;(&lt;/span&gt;ggplot2&lt;span class="p"&gt;)&lt;/span&gt;
library&lt;span class="p"&gt;(&lt;/span&gt;plotly&lt;span class="p"&gt;)&lt;/span&gt;
library&lt;span class="p"&gt;(&lt;/span&gt;zoo&lt;span class="p"&gt;)&lt;/span&gt;

dat &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; read.csv&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;tourism.csv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;## Define the &amp;quot;tidy&amp;quot; function and call it&lt;/span&gt;

tidy_WTTC &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;df&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  start &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; df&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  end &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; df&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; ncol&lt;span class="p"&gt;(&lt;/span&gt;df&lt;span class="p"&gt;)]&lt;/span&gt;

  df &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; df&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;nrow&lt;span class="p"&gt;(&lt;/span&gt;df&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;

  nms &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; c&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;country&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; paste0&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;y&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; seq&lt;span class="p"&gt;(&lt;/span&gt;start&lt;span class="p"&gt;,&lt;/span&gt; end&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

  names&lt;span class="p"&gt;(&lt;/span&gt;df&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; nms

  df &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; na.locf&lt;span class="p"&gt;(&lt;/span&gt;df&lt;span class="p"&gt;,&lt;/span&gt; fromLast &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  df &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; df&lt;span class="p"&gt;[&lt;/span&gt;seq&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; nrow&lt;span class="p"&gt;(&lt;/span&gt;df&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;

  df.melt &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; melt&lt;span class="p"&gt;(&lt;/span&gt;df&lt;span class="p"&gt;,&lt;/span&gt; id.vars &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;country&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; value.name&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;value&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; variable.name &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;year&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  df.melt&lt;span class="o"&gt;$&lt;/span&gt;year &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; as.numeric&lt;span class="p"&gt;(&lt;/span&gt;gsub&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;y&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; df.melt&lt;span class="o"&gt;$&lt;/span&gt;year&lt;span class="p"&gt;))&lt;/span&gt;

  df.melt&lt;span class="o"&gt;$&lt;/span&gt;value &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; as.numeric&lt;span class="p"&gt;(&lt;/span&gt;df.melt&lt;span class="o"&gt;$&lt;/span&gt;value&lt;span class="p"&gt;)&lt;/span&gt;

  df.melt
&lt;span class="p"&gt;}&lt;/span&gt;

tidy_dat &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; tidy_WTTC&lt;span class="p"&gt;(&lt;/span&gt;dat&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A few notes about the above code.  To do anything with Plotly in R, it is necessary to use the &lt;strong&gt;plotly&lt;/strong&gt; R package, &lt;a href="https://github.com/ropensci/plotly"&gt;which is available from rOpenSci's repository on GitHub&lt;/a&gt;.  As such, it must be installed first using the &lt;strong&gt;devtools&lt;/strong&gt; package with the command &lt;code&gt;install_github("ropensci/plotly")&lt;/code&gt;.  &lt;/p&gt;
&lt;p&gt;I'd also like to explain the function in brief.  I've set it up to handle data downloads from the WTTC, provided that a) you've chosen a group of countries and one variable, and b) you've saved the Excel download as a CSV.  Given the structure of the WTTC data, the function will detect the years you've chosen for your download and re-format the data accordingly.  Next, I use the &lt;code&gt;na.locf&lt;/code&gt; function from the &lt;strong&gt;zoo&lt;/strong&gt; package to resolve the fact that country names are on one row in the original data file, with corresponding values on the next row; this fills in NAs with their correct values.  I then remove the unnecessary rows, and then reshape and reformat the data for visualization with &lt;strong&gt;ggplot2&lt;/strong&gt;.    &lt;/p&gt;
&lt;p&gt;The data are now ready for plotting with &lt;strong&gt;ggplot2&lt;/strong&gt;, and can then be converted to an interactive Plotly chart.  The code below shows how to get this done.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;## Create the ggplot, initialize the plotly object, and convert the ggplot to plotly&lt;/span&gt;

t1 &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; ggplot&lt;span class="p"&gt;(&lt;/span&gt;tidy_dat&lt;span class="p"&gt;,&lt;/span&gt; aes&lt;span class="p"&gt;(&lt;/span&gt;x &lt;span class="o"&gt;=&lt;/span&gt; year&lt;span class="p"&gt;,&lt;/span&gt; y &lt;span class="o"&gt;=&lt;/span&gt; value&lt;span class="p"&gt;,&lt;/span&gt; color &lt;span class="o"&gt;=&lt;/span&gt; country&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; 
  geom_line&lt;span class="p"&gt;(&lt;/span&gt;size &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; 
  scale_color_brewer&lt;span class="p"&gt;(&lt;/span&gt;palette &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Set1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; 
  labs&lt;span class="p"&gt;(&lt;/span&gt;list&lt;span class="p"&gt;(&lt;/span&gt;x &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Year&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
            y &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Total contribution of tourism to GDP (percent)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
            title &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Total contribution of tourism to GDP (percent), select Pacific Island countries.  Data source: WTTC&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

py &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; plotly&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;YOUR USERNAME HERE&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;YOUR API KEY HERE&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

py&lt;span class="o"&gt;$&lt;/span&gt;ggplotly&lt;span class="p"&gt;(&lt;/span&gt;t1&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;strong&gt;ggplot2&lt;/strong&gt; code is fairly straightforward; I'm making a basic line chart with minimal customization.  After creating the ggplot, the last two lines of code are all that are necessary to create an interactive chart with Plotly.  You will need to sign up for a Plotly account and get an API key to get this to work; fill in your own username and password where instructed to initialize the Plotly interface object, which I've called &lt;code&gt;py&lt;/code&gt;.  Finally, the &lt;code&gt;py$ggplotly(t1)&lt;/code&gt; command converts the ggplot &lt;code&gt;t1&lt;/code&gt; into an interactive chart, which should appear in your browser.  If everything has worked correctly, you'll get a chart that looks like the one below:  &lt;/p&gt;
&lt;p&gt;(If the iframe is not showing up properly, &lt;a href="http://plot.ly/~walkerke/52"&gt;click here&lt;/a&gt; to access the chart)&lt;/p&gt;
&lt;hr /&gt;
&lt;div class = "iframe container"&gt;
&lt;iframe src="https://plot.ly/~walkerke/52" id="igraph" width="850" height="600" seamless scrolling="no" frameBorder = "0"&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;hr /&gt;
&lt;p&gt;I now have an interactive chart that contains a wealth of information about the tourist economies of select Pacific Island countries.  As the chart reveals, the economic significance of tourism figures differently from country to country in the Pacific.  In places like Vanuatu and Fiji, tourism is a large component of the local economy and is projected to increase in importance.  In contrast, tourism is less prominent in places like Tonga, which relies heavily on remittances from Tongans living abroad; this example is familiar to my students, &lt;a href="http://www.star-telegram.com/2013/12/31/5453055/in-euless-tongans-usher-in-the.html"&gt;as there is a large Tongan community living in cities very near to TCU&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;By default, Plotly embeds several options for interacting with the chart.  The user can click and drag on the chart itself to zoom in to particular areas; with a time series chart, this can be useful if the user wants to highlight a particular period of time in the graph.  Additionally, tooltips appear on hover that give direct access to the data informing the chart.  More interactivity is also available from the icons in the upper-right-hand corner of the chart, allowing users to zoom, pan, and change the desired tooltip display (all data series, or one at a time).  &lt;/p&gt;
&lt;p&gt;Once the chart is published to your Plotly account, you can customize it even further using Plotly's web-based GUI.  In the above example, I moved the position of the legend manually using the GUI to maximize the space occupied by the data; you can also edit the chart's appearance, change the axis and chart titles, and add notes to the chart, among other options.  &lt;/p&gt;
&lt;p&gt;Using &lt;code&gt;ggplotly&lt;/code&gt; in this way has become a major part of my workflow in preparing interactive materials for my teaching.  Here are a sampling of other charts I've prepared in this way:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://plot.ly/~walkerke/12"&gt;Total fertility rates in South Asia by country, 1960-2011&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://plot.ly/~walkerke/21"&gt;Past and future population of Japan (projected)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://plot.ly/~walkerke/30"&gt;GDP by country since 1970, major world economies&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;More examples can be found at &lt;a href="https://plot.ly/~walkerke"&gt;my Plotly page&lt;/a&gt;, and I'll be posting the code for these visualizations to GitHub.  While &lt;code&gt;ggplotly&lt;/code&gt; has worked great for me so far, it is still very early in development and only supports a limited number of chart types from &lt;strong&gt;ggplot2&lt;/strong&gt; (&lt;a href="http://aarongonzales.net/plotly_examples.html"&gt;see this post for details&lt;/a&gt;).  In turn, you'll need to use Plotly's APIs to create the unavailable chart types, which I have just started to work with.  This summer, I'm going to explore using Plotly as well using Python, &lt;a href="http://nbviewer.ipython.org/github/plotly/python-user-guide/blob/master/s00_homepage/s00_homepage.ipynb"&gt;which has a well-developed API&lt;/a&gt; and appears to work very well with the IPython Notebook.  &lt;/p&gt;
&lt;p&gt;As always, please contact me at &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#107;&amp;#121;&amp;#108;&amp;#101;&amp;#46;&amp;#119;&amp;#97;&amp;#108;&amp;#107;&amp;#101;&amp;#114;&amp;#64;&amp;#116;&amp;#99;&amp;#117;&amp;#46;&amp;#101;&amp;#100;&amp;#117;"&gt;&amp;#107;&amp;#121;&amp;#108;&amp;#101;&amp;#46;&amp;#119;&amp;#97;&amp;#108;&amp;#107;&amp;#101;&amp;#114;&amp;#64;&amp;#116;&amp;#99;&amp;#117;&amp;#46;&amp;#101;&amp;#100;&amp;#117;&lt;/a&gt; or get in touch with me on &lt;a href="https://twitter.com/kyle_e_walker"&gt;Twitter&lt;/a&gt; if you have any questions or feedback.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Thanks to:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/plotlygraphs"&gt;The Plotly team&lt;/a&gt; for their amazing work;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/WTTC"&gt;The World Travel and Tourism Council&lt;/a&gt; for generously making their data publicly available.  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="R"></category><category term="Plotly"></category><category term="World Regional"></category></entry><entry><title>Visualizing fertility trends in Europe</title><link href="http://walkerke.github.io/2014/03/tfr-in-europe/" rel="alternate"></link><updated>2014-03-06T00:00:00-06:00</updated><author><name>Kyle Walker</name></author><id>tag:walkerke.github.io,2014-03-06:2014/03/tfr-in-europe/</id><summary type="html">&lt;p&gt;In the classroom, interactive data visualizations can embed a wealth of information that can be interactively queried by the instructor depending on the course topics and students' questions.  The example I'll discuss below worked for me exactly in this way.  I'll show how to create an interactive chart using the World Bank's open data API; my example looks at fertility trends in European countries since 1960.  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://data.worldbank.org/"&gt;The World Bank's Open Data catalog&lt;/a&gt; is a tremendous resource for any instructor addressing global issues; the website itself has readily-available data and charts for view.  Additionally, the World Bank makes these datasets available to developers via their API, &lt;a href="https://blogs.worldbank.org/opendata/accessing-world-bank-data-apis-python-r-ruby-stata"&gt;which can in turn be accessed through modules in Python, R, Ruby, and Stata&lt;/a&gt;.    In R, the API is available through the &lt;a href="https://github.com/vincentarelbundock/WDI"&gt;WDI&lt;/a&gt; package by Vincent Arel-Bundock, which makes it very simple for users to quickly access formatted World Bank datasets.  With the &lt;a href="https://github.com/ramnathv/rCharts"&gt;rCharts&lt;/a&gt; package, R users can then create dynamic D3 visualizations using these data.  &lt;/p&gt;
&lt;p&gt;In my World Regional Geography course at TCU, I spent a class period discussing demographic shifts in Europe, with a focus on fertility declines and aging populations in various parts of the continent.  My goal was to create a visualization that would allow me to interactively explore how fertility has declined in different ways in in different regions, and then discuss with my students the reasons why we observe these variations.  To get started, I called the World Bank API in R with the WDI package to give me the total fertility rates (the number of children a woman in a population would be expected to have in her lifetime given current age-specific fertility rates) for selected European countries by year since 1960.  The code below shows how to do this: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;library&lt;span class="p"&gt;(&lt;/span&gt;WDI&lt;span class="p"&gt;)&lt;/span&gt;
library&lt;span class="p"&gt;(&lt;/span&gt;rCharts&lt;span class="p"&gt;)&lt;/span&gt;
library&lt;span class="p"&gt;(&lt;/span&gt;plyr&lt;span class="p"&gt;)&lt;/span&gt;

countries &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; c&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;AL&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;AT&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;BE&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;BA&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;BG&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;HR&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;CZ&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;DK&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;FI&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;FR&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;DE&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;GR&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
               &lt;span class="s"&gt;&amp;quot;HU&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;IS&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;IE&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;IT&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;NL&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;NO&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;PL&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;PT&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;RO&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;RS&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;SK&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;SI&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
               &lt;span class="s"&gt;&amp;quot;ES&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;SE&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;CH&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;GB&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

tfr &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; WDI&lt;span class="p"&gt;(&lt;/span&gt;country &lt;span class="o"&gt;=&lt;/span&gt; countries&lt;span class="p"&gt;,&lt;/span&gt; indicator &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;SP.DYN.TFRT.IN&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; start &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1960&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; end &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;2011&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A couple notes about the above code.  The WDI package asks for a vector of ISO-2 country codes for which it will fetch data; you can get those from many places, such as &lt;a href="http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2"&gt;this Wikipedia page&lt;/a&gt;.  The &lt;code&gt;WDI&lt;/code&gt; function also requires the World Bank's code for your indicator of interest; you can use the &lt;code&gt;WDIsearch&lt;/code&gt; function in R to look for indicator codes, or simply look them up on the World Bank's website.  I've selected the code for the total fertility rate (TFR), and asked the function to give me data from 1960 to 2011 (the last year that TFR data are available).   I now have an R data frame, &lt;code&gt;tfr&lt;/code&gt;, that includes a time series of total fertility rates since 1960 for each country I asked for.  &lt;/p&gt;
&lt;p&gt;To visualize the data, I have selected the &lt;a href="http://nvd3.org/"&gt;NVD3 library&lt;/a&gt;, which is a D3 charting library that is available to R users through rCharts.  The code below will clean the data slightly for visualization, and call rCharts' &lt;code&gt;nPlot&lt;/code&gt; function to create an interactive chart.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;#Clean up the data a bit&lt;/span&gt;
tfr &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; rename&lt;span class="p"&gt;(&lt;/span&gt;tfr&lt;span class="p"&gt;,&lt;/span&gt; replace &lt;span class="o"&gt;=&lt;/span&gt; c&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;SP.DYN.TFRT.IN&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;TFR&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

tfr&lt;span class="o"&gt;$&lt;/span&gt;TFR &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; round&lt;span class="p"&gt;(&lt;/span&gt;tfr&lt;span class="o"&gt;$&lt;/span&gt;TFR&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Create the chart&lt;/span&gt;
tfrPlot &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; nPlot&lt;span class="p"&gt;(&lt;/span&gt;
  TFR &lt;span class="o"&gt;~&lt;/span&gt; year&lt;span class="p"&gt;,&lt;/span&gt; 
  data &lt;span class="o"&gt;=&lt;/span&gt; tfr&lt;span class="p"&gt;,&lt;/span&gt; 
  group &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;country&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  type &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;lineChart&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Add axis labels and format the tooltip&lt;/span&gt;
tfrPlot&lt;span class="o"&gt;$&lt;/span&gt;yAxis&lt;span class="p"&gt;(&lt;/span&gt;axisLabel &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Total fertility rate&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; width &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;62&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

tfrPlot&lt;span class="o"&gt;$&lt;/span&gt;xAxis&lt;span class="p"&gt;(&lt;/span&gt;axisLabel &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Year&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

tfrPlot&lt;span class="o"&gt;$&lt;/span&gt;chart&lt;span class="p"&gt;(&lt;/span&gt;tooltipContent &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;#! function(key, x, y){&lt;/span&gt;
&lt;span class="s"&gt;        return &amp;#39;&amp;lt;h3&amp;gt;&amp;#39; + key + &amp;#39;&amp;lt;/h3&amp;gt;&amp;#39; + &lt;/span&gt;
&lt;span class="s"&gt;        &amp;#39;&amp;lt;p&amp;gt;&amp;#39; + y + &amp;#39; in &amp;#39; + x + &amp;#39;&amp;lt;/p&amp;gt;&amp;#39;&lt;/span&gt;
&lt;span class="s"&gt;        } !#&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Typing &lt;code&gt;tfrPlot&lt;/code&gt; in the console produces the graphic below:&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;iframe src="http://walkerke.github.io/teaching-with-datavis/plots/tfrplot.html" width="825" height="450" seamless frameBorder = "0"&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;The chart shows an overall decline in fertility in Europe since 1960; however, beyond that, it is a mess of information.  You can get tooltips on hover that allow you to discern some things that are going on, but it is really difficult to make out any particular country.  This is where NVD3 and rCharts really shine, however.  The chart's legend is interactive; you can click the bubble next to each country's name to turn off and on its line.  Further, if you double-click a country, the chart will reveal the line for that country only.  In turn, the chart functions as an application that the user can modify as she or he wishes.  For example, I used this chart to explore differences between fertility levels in Scandinavia and Southern Europe with a few clicks, as seen in the example below:&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;iframe src="http://walkerke.github.io/teaching-with-datavis/plots/selected.html" width="825" height="450" seamless frameBorder = "0"&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;In class, we interactively explored comparisons between countries all over Europe, discussing the varying roles of social programs, cultural differences, economic well-being, etc. in influencing the type of gaps like those observed in the chart above.  &lt;/p&gt;
&lt;p&gt;Additionally, rCharts includes options for specifying the type of chart you want to show in advance.  For example, I discussed in class the specific case of Romania, which during the &lt;a href="http://en.wikipedia.org/wiki/Nicolae_Ceausescu"&gt;Ceausescu era&lt;/a&gt; pursued severe pro-natalist policies that influenced sharp fluctuations in the country's TFR, and had lasting negative impacts on the health of Romanian women.  The code below modifies the chart's options to show only Romania.  To do this, I created a vector of unique country codes in their sorted order in my &lt;code&gt;tfr&lt;/code&gt; data frame, then created a boolean vector in which only the position representing Romania was set to false.  I can then pass this vector as a parameter in my chart's options, telling it to disable all lines except Romania.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ids &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; unique&lt;span class="p"&gt;(&lt;/span&gt;tfr&lt;span class="o"&gt;$&lt;/span&gt;iso2c&lt;span class="p"&gt;)&lt;/span&gt;

rom &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; as.logical&lt;span class="p"&gt;(&lt;/span&gt;ids &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;RO&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

tfrPlot&lt;span class="o"&gt;$&lt;/span&gt;set&lt;span class="p"&gt;(&lt;/span&gt;disabled &lt;span class="o"&gt;=&lt;/span&gt; rom&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Below, you can see the result. Note the huge jump in fertility between 1966 and 1967, which was in part the result of strong restrictions on abortion and contraception in the country.  Shortly thereafter, however, fertility rates fell once again; the slight bump in the 1980s was due to additional government influence in child-bearing, which in part included government monitoring of women to ensure that they were carrying pregnancies to term. Since the fall of the Ceausescu regime, the fertility rate plummeted to what is now one of the lowest in the world.  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;iframe src="http://walkerke.github.io/teaching-with-datavis/plots/romaniaplot.html" width="825" height="450" seamless frameBorder = "0"&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;For me, this example shows the power of interactive data visualization in the classroom.  Instead of a series of pre-made charts that I had chosen in advance of my lecture, my students were able to choose countries they were interested in looking at, allowing me to build a more interactive classroom experience.  &lt;/p&gt;
&lt;p&gt;I should mention as well that I display these charts in class using &lt;a href="https://github.com/ramnathv/slidify"&gt;slidify&lt;/a&gt;, which is an R package for creating HTML5 presentations from Markdown.  Its author, Ramnath Vaidyanathan, is also the author of rCharts; as such, slidify and rCharts play very nicely together.  I'll likely discuss my experiences with slidify in a future post, as I am using it now to produce all my lecture materials.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;To create the fertility chart on your computer, follow these steps:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Be sure that you have the following R packages installed: &lt;strong&gt;WDI&lt;/strong&gt;, &lt;strong&gt;plyr&lt;/strong&gt;, and &lt;strong&gt;rCharts&lt;/strong&gt;.  rCharts is not yet on CRAN, so you'll need to install it from GitHub with the &lt;strong&gt;devtools&lt;/strong&gt; package.  I use the &lt;code&gt;dev&lt;/code&gt; branch of rCharts, which has the latest updates; you can install this with the command, &lt;code&gt;devtools::install_github('rCharts', 'ramnathv', ref='dev')&lt;/code&gt;.  &lt;/li&gt;
&lt;li&gt;Run the following command: &lt;code&gt;source("https://raw.github.com/walkerke/teaching-with-datavis/master/tfr-in-europe.R")&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Type &lt;code&gt;tfrPlot&lt;/code&gt; in the R console to create your chart!  Just a quick note: I have trouble showing NVD3 charts in the RStudio viewer, so you may need to open the chart in your web browser of choice to view it.  &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The code is available on GitHub; use it as you please (though I'd love to hear how you are adapting/modifying it if you do).    &lt;/p&gt;
&lt;p&gt;To contact me, email me at &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#107;&amp;#121;&amp;#108;&amp;#101;&amp;#46;&amp;#119;&amp;#97;&amp;#108;&amp;#107;&amp;#101;&amp;#114;&amp;#64;&amp;#116;&amp;#99;&amp;#117;&amp;#46;&amp;#101;&amp;#100;&amp;#117;"&gt;&amp;#107;&amp;#121;&amp;#108;&amp;#101;&amp;#46;&amp;#119;&amp;#97;&amp;#108;&amp;#107;&amp;#101;&amp;#114;&amp;#64;&amp;#116;&amp;#99;&amp;#117;&amp;#46;&amp;#101;&amp;#100;&amp;#117;&lt;/a&gt;, or connect with me on &lt;a href="https://twitter.com/kyle_e_walker"&gt;Twitter&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Thanks to:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://data.worldbank.org/"&gt;The World Bank&lt;/a&gt; for generously making their data publicly available;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/ramnath_vaidya"&gt;Ramnath Vaidyanathan&lt;/a&gt; and &lt;a href="https://twitter.com/timelyportfolio"&gt;Timely Portfolio&lt;/a&gt; for the amazing rCharts;&lt;/li&gt;
&lt;li&gt;Vincent Arel-Bundock for creating the WDI package;&lt;/li&gt;
&lt;li&gt;The developers of NVD3 and d3.js for their innovations in data visualization.  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="R"></category><category term="rCharts"></category><category term="World Regional"></category></entry><entry><title>Visualizing the U.S. Hispanic population by state</title><link href="http://walkerke.github.io/2014/01/hispanic-pop-by-state/" rel="alternate"></link><updated>2014-01-09T00:00:00-06:00</updated><author><name>Kyle Walker</name></author><id>tag:walkerke.github.io,2014-01-09:2014/01/hispanic-pop-by-state/</id><summary type="html">&lt;p&gt;Welcome! This is the first post of my effort to document my foray into developing interactive data visualizations for use in my teaching.  Hopefully these examples will be of use to some readers who are interested in creating their own visualizations.  &lt;/p&gt;
&lt;p&gt;I'll first provide a bit of background.  I'm a geography professor at Texas Christian University in Fort Worth, and started getting interested in data visualization when putting together materials for a course I taught in population geography last spring.  Visuals are essential for social science instructors; however, it is not always easy to find publicly available images that are both effective and suitable for what you want to teach (I imagine many of you, like me, have gone on many a failed Google image search).  So, I started looking into developing my own materials.  I happened upon the incredible &lt;a href="http://d3js.org/"&gt;D3 JavaScript library&lt;/a&gt; by Mike Bostock and the stunning graphics from the &lt;a href="http://www.healthmetricsandevaluation.org/tools/data-visualizations"&gt;Institute for Health Metrics and Evaluation&lt;/a&gt; and was immediately blown away.  Interactive examples like &lt;a href="http://bl.ocks.org/mbostock/4062085"&gt;this population pyramid&lt;/a&gt; can be very effective for conveying social science concepts.  &lt;/p&gt;
&lt;p&gt;As a relative newcomer to JavaScript, however, I looked into what other resources were available for creating these types of interactive visualizations, especially in languages I have more of a familiarity with (R and Python, specifically).  Thus far, I've been using the fantastic &lt;a href="http://rcharts.io/"&gt;rCharts&lt;/a&gt; R package by Ramnath Vaidyanathan, which provides an R wrapper for several JavaScript charting libraries, and the the &lt;a href="http://cran.r-project.org/web/packages/googleVis/index.html"&gt;googleVis&lt;/a&gt; package, which is an R interface for the Google Charts API, and among other things allows R users to create &lt;a href="http://www.gapminder.org/"&gt;Hans Rosling-style motion charts.&lt;/a&gt;.  I've also started looking into tools like &lt;a href="https://plot.ly/"&gt;plotly&lt;/a&gt;, which has both R and Python APIs, and hope to create my own D3 visualizations from scratch eventually.  &lt;/p&gt;
&lt;p&gt;When possible, my examples on this site will use open data/open source tools and will be available on GitHub, so that anyone interested can use and adapt these examples as they need.  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;My first example is a visualization of the composition of Hispanic populations by state in the U.S., for the ten states with the largest Hispanic populations in 2010.   In my introductory geography course, I'm going to be soon discussing shifts in the racial &amp;amp; ethnic composition of the U.S.  Sometime between 2040 and 2050, non-Hispanic whites are projected to become a minority in the U.S., in large part due to continued growth of the Hispanic population.  However, I find that many discussions of this demographic shift in the media tend to homogenize the Hispanic population, which is not what I want to convey to my students; as such, I wanted to find a way to visualize its diversity.  I came across &lt;a href="http://www.pewhispanic.org/2012/09/06/population-distribution-of-hispanic-origin-groups-by-county/"&gt;these interesting interactive maps from the Pew Research Center&lt;/a&gt;, and downloaded the data they made available to see what I might do with it.  &lt;/p&gt;
&lt;p&gt;The data made available by the Pew Research Center are in Excel format.  There are many libraries for reading Excel data into R, but they often are not straightforward to use, so I first opened the file in Excel and saved it as a CSV for ease of use.  In their original form, the data are not in a great format for visualization in R; as such, I needed to do some munging, with help from Hadley Wickham's excellent packages.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# First, download the Excel file from the Pew Research Center, and save it as a CSV in your working directory&lt;/span&gt;

library&lt;span class="p"&gt;(&lt;/span&gt;stringr&lt;span class="p"&gt;)&lt;/span&gt;
library&lt;span class="p"&gt;(&lt;/span&gt;plyr&lt;span class="p"&gt;)&lt;/span&gt;
library&lt;span class="p"&gt;(&lt;/span&gt;rCharts&lt;span class="p"&gt;)&lt;/span&gt;
library&lt;span class="p"&gt;(&lt;/span&gt;reshape2&lt;span class="p"&gt;)&lt;/span&gt;

dat &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; read.csv&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;all_counties_by_top_six_groups.csv&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

keep &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; seq&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

dat &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; dat&lt;span class="p"&gt;[,&lt;/span&gt;keep&lt;span class="p"&gt;]&lt;/span&gt;

nms &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; c&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Total.Hisp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Mexican&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Puerto.Rican&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Cuban&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Salvadoran&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Dominican&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Guatemalan&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Other&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

names&lt;span class="p"&gt;(&lt;/span&gt;dat&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; nms

dat &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; dat&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;c&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The above code simply cleans up the data to shape it into a nicely formatted data frame, and subsets it to get the population counts that we need.  However, there are still some steps to take before the data can be visualized.  Given the original data format, R has read in all my numeric data as factors, which wouldn't let me make the kinds of manipulations I needed to do to aggregate the data by state.  Such aggregation also required some string manipulation, so that I could identify which counts correspond to each state (given that the geographic identifiers in the data are presented as 'County, State').  The code that follows cleans up the data even further and aggregates each numeric column by state.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;dat &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; cbind&lt;span class="p"&gt;(&lt;/span&gt;dat&lt;span class="p"&gt;,&lt;/span&gt; ldply&lt;span class="p"&gt;(&lt;/span&gt;str_split&lt;span class="p"&gt;(&lt;/span&gt;dat&lt;span class="o"&gt;$&lt;/span&gt;Name&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;, &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

names&lt;span class="p"&gt;(&lt;/span&gt;dat&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; c&lt;span class="p"&gt;(&lt;/span&gt;nms&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;County&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;State&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

convCols &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="m"&gt;9&lt;/span&gt;

dat&lt;span class="p"&gt;[,&lt;/span&gt;convCols&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; apply&lt;span class="p"&gt;(&lt;/span&gt;dat&lt;span class="p"&gt;[,&lt;/span&gt;convCols&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="p"&gt;)&lt;/span&gt; as.numeric&lt;span class="p"&gt;(&lt;/span&gt;as.character&lt;span class="p"&gt;(&lt;/span&gt;gsub&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;,&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; x&lt;span class="p"&gt;))))&lt;/span&gt;

sums &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; ddply&lt;span class="p"&gt;(&lt;/span&gt;dat&lt;span class="p"&gt;,&lt;/span&gt; .&lt;span class="p"&gt;(&lt;/span&gt;State&lt;span class="p"&gt;),&lt;/span&gt; numcolwise&lt;span class="p"&gt;(&lt;/span&gt;sum&lt;span class="p"&gt;))&lt;/span&gt;

sorteddf &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; sums&lt;span class="p"&gt;[&lt;/span&gt;order&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;sums&lt;span class="o"&gt;$&lt;/span&gt;Total.Hisp&lt;span class="p"&gt;),][&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I've now identified the 10 states with the largest Hispanic populations, and aggregated the different ancestry columns by state.  I now needed to decide how to visualize these data.  I elected to use the &lt;a href="http://dimplejs.org/"&gt;dimple&lt;/a&gt; D3 library, which is available through rCharts.  My hope was to create something like &lt;a href="http://dimplejs.org/examples_viewer.html?id=bars_horizontal_stacked_100pct"&gt;this horizontal 100% chart&lt;/a&gt;, which would allow direct comparison of the Hispanic population composition of these states.  Fortunately, rCharts makes this straightforward.  I first created a new data frame that held percentages instead of raw counts, reshaped it into a suitable format, and called rCharts' &lt;code&gt;dPlot&lt;/code&gt; function to create the chart.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;newdf &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; data.frame&lt;span class="p"&gt;(&lt;/span&gt;sorteddf&lt;span class="o"&gt;$&lt;/span&gt;State&lt;span class="p"&gt;)&lt;/span&gt;

vals &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; c&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Mexican&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Puerto.Rican&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Cuban&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Salvadoran&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Dominican&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Guatemalan&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Other&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kr"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;v &lt;span class="kr"&gt;in&lt;/span&gt; vals&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  newdf&lt;span class="p"&gt;[[&lt;/span&gt;v&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; round&lt;span class="p"&gt;(((&lt;/span&gt;sorteddf&lt;span class="p"&gt;[[&lt;/span&gt;v&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; sorteddf&lt;span class="o"&gt;$&lt;/span&gt;Total.Hisp&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

names&lt;span class="p"&gt;(&lt;/span&gt;newdf&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; c&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;State&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; vals&lt;span class="p"&gt;)&lt;/span&gt;

df.melt &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; melt&lt;span class="p"&gt;(&lt;/span&gt;newdf&lt;span class="p"&gt;,&lt;/span&gt; variable.name &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Ancestry&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; value.name &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Share&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

d1 &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; dPlot&lt;span class="p"&gt;(&lt;/span&gt;
  x &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Share&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  y &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;State&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  groups &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Ancestry&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  data &lt;span class="o"&gt;=&lt;/span&gt; df.melt&lt;span class="p"&gt;,&lt;/span&gt; 
  type &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;#Here, set the chart options to tell rCharts how to format the visualization  &lt;/span&gt;
d1&lt;span class="o"&gt;$&lt;/span&gt;xAxis&lt;span class="p"&gt;(&lt;/span&gt;type &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;addPctAxis&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
d1&lt;span class="o"&gt;$&lt;/span&gt;yAxis&lt;span class="p"&gt;(&lt;/span&gt;type &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;addCategoryAxis&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; orderRule &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;State&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

d1&lt;span class="o"&gt;$&lt;/span&gt;legend&lt;span class="p"&gt;(&lt;/span&gt; x &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; y &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; width &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;700&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; height &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; horizontalAlign &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;left&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; orderRule &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Ancestry&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Below, you can see the result: &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;&lt;iframe src="http://bl.ocks.org/walkerke/raw/8300770/" width="825" height="450" seamless frameBorder = "0"&gt;&lt;/iframe&gt;&lt;/h2&gt;
&lt;p&gt;The plot has accomplished what I hoped - displaying the considerable diversity of the Hispanic population across different states in the U.S.  The key here to the chart is the interactivity; while I could have produced a static visualization just like this, each component of the chart provides a tooltip on hover that gives specific information about its content.  I now have a more interactive document that I can explore with my students.  &lt;/p&gt;
&lt;p&gt;As the chart reveals, Hispanics are generally of Mexican origin in several states, including my state of Texas, where 84% of Hispanics are of Mexican ancestry; this will be the frame of reference for my students.  However, I can show students how in other parts of the country, such as my old home of New York, 'Hispanic' means something very different, as individuals of Mexican heritage only make up 13% of the state's Hispanic population.  It is also interesting to see how the 'Other' category varies by state.  In some states (New York, New Jersey, New Mexico, Florida), this category is very large.  The &lt;a href="http://www.pewhispanic.org/files/2012/06/The-10-Largest-Hispanic-Origin-Groups.pdf"&gt;Pew Center report provides some additional information on this&lt;/a&gt;; for example, many Colombians, Hondurans, and Peruvians live in the Miami area, and Queens, NYC has a large Ecuadorian population.  In New Mexico, the data reflect the Spanish and Native American heritage of many Hispanics in the state.  &lt;/p&gt;
&lt;p&gt;There are still some improvements that could be made; for example, in some browsers, the y-axis title is partially hidden, which I need to look into further.  Also, in order to get the effects to work correctly, I had to modify the version of Dimple in the HTML to point to version 1.1.3 (rCharts is still on 1.1.1).  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;To create this chart on your computer, follow these steps:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Visit the &lt;a href="http://www.pewhispanic.org/2012/09/06/population-distribution-of-hispanic-origin-groups-by-county/"&gt;Pew Research Center site&lt;/a&gt;, download the Excel file they make available, and save it as a CSV in your working directory (don't change the name, just the type).  &lt;/li&gt;
&lt;li&gt;Be sure that you have the following R packages installed: &lt;code&gt;stringr&lt;/code&gt;, &lt;code&gt;plyr&lt;/code&gt;, &lt;code&gt;rCharts&lt;/code&gt;, and &lt;code&gt;reshape2&lt;/code&gt;.  &lt;code&gt;rCharts&lt;/code&gt; is not yet on CRAN, so you'll need to install it from GitHub with the &lt;code&gt;devtools&lt;/code&gt; package.  I use the &lt;code&gt;dev&lt;/code&gt; branch of rCharts, which has the latest updates; you can install this with the command, &lt;code&gt;devtools::install_github('rCharts', 'ramnathv', ref='dev')&lt;/code&gt;.  &lt;/li&gt;
&lt;li&gt;Run the following command: &lt;code&gt;source("https://raw.github.com/walkerke/teaching-with-datavis/master/hispanics-by-state.R")&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Type &lt;code&gt;d1&lt;/code&gt; in your console, and you'll have your chart!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Alternatively, feel free to grab the code from GitHub and modify it as you wish.  &lt;/p&gt;
&lt;p&gt;I'd love to hear your feedback; you can send me an email at &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#107;&amp;#121;&amp;#108;&amp;#101;&amp;#46;&amp;#119;&amp;#97;&amp;#108;&amp;#107;&amp;#101;&amp;#114;&amp;#64;&amp;#116;&amp;#99;&amp;#117;&amp;#46;&amp;#101;&amp;#100;&amp;#117;"&gt;&amp;#107;&amp;#121;&amp;#108;&amp;#101;&amp;#46;&amp;#119;&amp;#97;&amp;#108;&amp;#107;&amp;#101;&amp;#114;&amp;#64;&amp;#116;&amp;#99;&amp;#117;&amp;#46;&amp;#101;&amp;#100;&amp;#117;&lt;/a&gt;, or connect with me on &lt;a href="https://twitter.com/kyle_e_walker"&gt;Twitter&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Thanks to:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.pewhispanic.org/"&gt;The Pew Research Center's Hispanic Trends Project&lt;/a&gt; for making their data publicly available;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/ramnath_vaidya"&gt;Ramnath Vaidyanathan&lt;/a&gt; and &lt;a href="https://twitter.com/timelyportfolio"&gt;Timely Portfolio&lt;/a&gt; for their efforts and tutorials on rCharts;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/jkiernander"&gt;John Kiernander&lt;/a&gt; for the DimpleJS library;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/hadleywickham"&gt;Hadley Wickham&lt;/a&gt; and the &lt;a href="https://twitter.com/rstudioapp"&gt;RStudio team&lt;/a&gt; for making R a much better place to work with data.  &lt;/li&gt;
&lt;/ul&gt;</summary><category term="R"></category><category term="rCharts"></category><category term="World Regional"></category></entry></feed>