<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Teaching with Interactive Data Visualization</title><link>http://walkerke.github.io/</link><description></description><atom:link href="http://walkerke.github.io/feeds/all.rss.xml" rel="self"></atom:link><lastBuildDate>Mon, 12 May 2014 00:00:00 -0500</lastBuildDate><item><title>Visualizing the economics of tourism in the Pacific with Plotly</title><link>http://walkerke.github.io/2014/05/tourism-plotly/</link><description>&lt;p&gt;Over the last month or so, I've been working a lot with &lt;a href="http://plot.ly"&gt;Plotly&lt;/a&gt; to visualize data for my World Regional Geography course.  Plotly is a web-based service that allows for the creation of interactive, D3-based visualizations that can be easily shared.  Visualizations are deployed and hosted on Plotly's servers, so the service requires a connection to the internet to work.  One of the great things about Plotly is that it has APIs for popular data programming languages like &lt;a href="http://plot.ly/r/"&gt;R&lt;/a&gt;, &lt;a href="http://plot.ly/python/"&gt;Python&lt;/a&gt;, and &lt;a href="http://plot.ly/julia/"&gt;Julia&lt;/a&gt;.  I really got hooked on Plotly, however, when I learned about &lt;code&gt;ggplotly&lt;/code&gt;, &lt;a href="http://ropensci.org/blog/2014/04/17/plotly/"&gt;which allows you to convert &lt;strong&gt;ggplot2&lt;/strong&gt; graphs in R to interactive Plotly charts with just a couple extra lines of code&lt;/a&gt;.   I'm going to go over an example of how I used &lt;code&gt;ggplotly&lt;/code&gt; to assist with a discussion of the economic significance of tourism in the Pacific.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;In my final class of the semester, I focused on Oceania (defined as Australia, New Zealand, and Pacific Island nations).  In this class, I wanted to show students how small, relatively isolated countries in the Pacific can be acutely affected by larger global forces.  We focused on topics such as trash accumulation in the Pacific, sea level rise due to climate change, and the ways in which island countries are connected to the global economy.  As part of this, we discussed the role of tourism in Pacific Island economies.  To help illustrate this to my students, I sought out data on the tourist economies of these countries, which is freely available from the &lt;a href="http://www.wttc.org/research/economic-data-search-tool/"&gt;World Travel &amp;amp; Tourism Council's Economic Data Search Tool&lt;/a&gt;.  To download the data, I followed these steps: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;For Step 1 of the search tool, I clicked &lt;strong&gt;Countries &amp;gt; Oceania&lt;/strong&gt;, then selected Fiji, Kiribati, Other Oceania, Solomon Islands, Tonga, and Vanuatu.  &lt;/li&gt;
&lt;li&gt;For Step 2, I selected "Travel &amp;amp; Tourism Total Contribution to GDP."  These figures include both tourism's direct contributions to GDP (e.g. GDP generated by hotels, airlines, etc.) and its indirect contributions to the economy; &lt;a href="http://www.wttc.org/site_media/uploads/downloads/oceania2014.pdf"&gt;see this report for more details&lt;/a&gt;.  &lt;/li&gt;
&lt;li&gt;For Step 3, I selected "% share" as my unit, as I was interested in the extent to which tourism figures in the overall constitution of these countries' economies.  &lt;/li&gt;
&lt;li&gt;I chose the entire date range from 1988 to 2024 (projected), and clicked &lt;strong&gt;Submit&lt;/strong&gt;.  &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The data can then be downloaded as an Excel file.  However, the Excel file is formatted in a way that resembles the HTML on the web page, and as such is not in the "tidy" format that is required for visualization in ggplot2.  As such, I saved the file as a CSV (which is available from my GitHub repository) and imported the data into R for some cleaning.  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;The R code below shows one way to clean up data downloaded from the WTTC in this particular format (multiple countries, one variable).  I've written a function, &lt;code&gt;tidy_WTTC&lt;/code&gt;, that should work for any dataset in this form available from the WTTC.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# Load packages and data&lt;/span&gt;

library&lt;span class="p"&gt;(&lt;/span&gt;reshape2&lt;span class="p"&gt;)&lt;/span&gt;
library&lt;span class="p"&gt;(&lt;/span&gt;ggplot2&lt;span class="p"&gt;)&lt;/span&gt;
library&lt;span class="p"&gt;(&lt;/span&gt;plotly&lt;span class="p"&gt;)&lt;/span&gt;
library&lt;span class="p"&gt;(&lt;/span&gt;zoo&lt;span class="p"&gt;)&lt;/span&gt;

dat &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; read.csv&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;tourism.csv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;## Define the &amp;quot;tidy&amp;quot; function and call it&lt;/span&gt;

tidy_WTTC &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;df&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  start &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; df&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  end &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; df&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; ncol&lt;span class="p"&gt;(&lt;/span&gt;df&lt;span class="p"&gt;)]&lt;/span&gt;

  df &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; df&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;nrow&lt;span class="p"&gt;(&lt;/span&gt;df&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;

  nms &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; c&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;country&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; paste0&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;y&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; seq&lt;span class="p"&gt;(&lt;/span&gt;start&lt;span class="p"&gt;,&lt;/span&gt; end&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

  names&lt;span class="p"&gt;(&lt;/span&gt;df&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; nms

  df &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; na.locf&lt;span class="p"&gt;(&lt;/span&gt;df&lt;span class="p"&gt;,&lt;/span&gt; fromLast &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  df &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; df&lt;span class="p"&gt;[&lt;/span&gt;seq&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; nrow&lt;span class="p"&gt;(&lt;/span&gt;df&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;

  df.melt &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; melt&lt;span class="p"&gt;(&lt;/span&gt;df&lt;span class="p"&gt;,&lt;/span&gt; id.vars &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;country&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; value.name&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;value&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; variable.name &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;year&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  df.melt&lt;span class="o"&gt;$&lt;/span&gt;year &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; as.numeric&lt;span class="p"&gt;(&lt;/span&gt;gsub&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;y&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; df.melt&lt;span class="o"&gt;$&lt;/span&gt;year&lt;span class="p"&gt;))&lt;/span&gt;

  df.melt&lt;span class="o"&gt;$&lt;/span&gt;value &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; as.numeric&lt;span class="p"&gt;(&lt;/span&gt;df.melt&lt;span class="o"&gt;$&lt;/span&gt;value&lt;span class="p"&gt;)&lt;/span&gt;

  df.melt
&lt;span class="p"&gt;}&lt;/span&gt;

tidy_dat &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; tidy_WTTC&lt;span class="p"&gt;(&lt;/span&gt;dat&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A few notes about the above code.  To do anything with Plotly in R, it is necessary to use the &lt;strong&gt;plotly&lt;/strong&gt; R package, &lt;a href="https://github.com/ropensci/plotly"&gt;which is available from rOpenSci's repository on GitHub&lt;/a&gt;.  As such, it must be installed first using the &lt;strong&gt;devtools&lt;/strong&gt; package with the command &lt;code&gt;install_github("ropensci/plotly")&lt;/code&gt;.  &lt;/p&gt;
&lt;p&gt;I'd also like to explain the function in brief.  I've set it up to handle data downloads from the WTTC, provided that a) you've chosen a group of countries and one variable, and b) you've saved the Excel download as a CSV.  Given the structure of the WTTC data, the function will detect the years you've chosen for your download and re-format the data accordingly.  Next, I use the &lt;code&gt;na.locf&lt;/code&gt; function from the &lt;strong&gt;zoo&lt;/strong&gt; package to resolve the fact that country names are on one row in the original data file, with corresponding values on the next row; this fills in NAs with their correct values.  I then remove the unnecessary rows, and then reshape and reformat the data for visualization with &lt;strong&gt;ggplot2&lt;/strong&gt;.    &lt;/p&gt;
&lt;p&gt;The data are now ready for plotting with &lt;strong&gt;ggplot2&lt;/strong&gt;, and can then be converted to an interactive Plotly chart.  The code below shows how to get this done.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;## Create the ggplot, initialize the plotly object, and convert the ggplot to plotly&lt;/span&gt;

t1 &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; ggplot&lt;span class="p"&gt;(&lt;/span&gt;tidy_dat&lt;span class="p"&gt;,&lt;/span&gt; aes&lt;span class="p"&gt;(&lt;/span&gt;x &lt;span class="o"&gt;=&lt;/span&gt; year&lt;span class="p"&gt;,&lt;/span&gt; y &lt;span class="o"&gt;=&lt;/span&gt; value&lt;span class="p"&gt;,&lt;/span&gt; color &lt;span class="o"&gt;=&lt;/span&gt; country&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; 
  geom_line&lt;span class="p"&gt;(&lt;/span&gt;size &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; 
  scale_color_brewer&lt;span class="p"&gt;(&lt;/span&gt;palette &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Set1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; 
  labs&lt;span class="p"&gt;(&lt;/span&gt;list&lt;span class="p"&gt;(&lt;/span&gt;x &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Year&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
            y &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Total contribution of tourism to GDP (percent)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
            title &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Total contribution of tourism to GDP (percent), select Pacific Island countries.  Data source: WTTC&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

py &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; plotly&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;YOUR USERNAME HERE&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;YOUR API KEY HERE&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

py&lt;span class="o"&gt;$&lt;/span&gt;ggplotly&lt;span class="p"&gt;(&lt;/span&gt;t1&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;strong&gt;ggplot2&lt;/strong&gt; code is fairly straightforward; I'm making a basic line chart with minimal customization.  After creating the ggplot, the last two lines of code are all that are necessary to create an interactive chart with Plotly.  You will need to sign up for a Plotly account and get an API key to get this to work; fill in your own username and password where instructed to initialize the Plotly interface object, which I've called &lt;code&gt;py&lt;/code&gt;.  Finally, the &lt;code&gt;py$ggplotly(t1)&lt;/code&gt; command converts the ggplot &lt;code&gt;t1&lt;/code&gt; into an interactive chart, which should appear in your browser.  If everything has worked correctly, you'll get a chart that looks like this:  &lt;/p&gt;
&lt;hr /&gt;
&lt;iframe src="http://plot.ly/~walkerke/52" width="850" height="600" seamless scrolling="no" frameBorder = "0"&gt;&lt;/iframe&gt;

&lt;hr /&gt;
&lt;p&gt;I now have an interactive chart that contains a wealth of information about the tourist economies of select Pacific Island countries.  As the chart reveals, the economic significance of tourism figures differently from country to country in the Pacific.  In places like Vanuatu and Fiji, tourism is a large component of the local economy and is projected to increase in importance.  In contrast, tourism is less prominent in places like Tonga, which relies heavily on remittances from Tongans living abroad; this example is familiar to my students, &lt;a href="http://www.star-telegram.com/2013/12/31/5453055/in-euless-tongans-usher-in-the.html"&gt;as there is a large Tongan community living in cities very near to TCU&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;By default, Plotly embeds several options for interacting with the chart.  The user can click and drag on the chart itself to zoom in to particular areas; with a time series chart, this can be useful if the user wants to highlight a particular period of time in the graph.  Additionally, tooltips appear on hover that give direct access to the data informing the chart.  More interactivity is also available from the icons in the upper-right-hand corner of the chart, allowing users to zoom, pan, and change the desired tooltip display (all data series, or one at a time).  &lt;/p&gt;
&lt;p&gt;Once the chart is published to your Plotly account, you can customize it even further using Plotly's web-based GUI.  In the above example, I moved the position of the legend manually using the GUI to maximize the space occupied by the data; you can also edit the chart's appearance, change the axis and chart titles, and add notes to the chart, among other options.  &lt;/p&gt;
&lt;p&gt;Using &lt;code&gt;ggplotly&lt;/code&gt; in this way has become a major part of my workflow in preparing interactive materials for my teaching.  Here are a sampling of other charts I've prepared in this way:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://plot.ly/~walkerke/12"&gt;Total fertility rates in South Asia by country, 1960-2011&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://plot.ly/~walkerke/21"&gt;Past and future population of Japan (projected)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://plot.ly/~walkerke/30"&gt;GDP by country since 1970, major world economies&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;More examples can be found at &lt;a href="https://plot.ly/~walkerke"&gt;my Plotly page&lt;/a&gt;, and I'll be posting the code for these visualizations to GitHub.  While &lt;code&gt;ggplotly&lt;/code&gt; has worked great for me so far, it is still very early in development and only supports a limited number of chart types from &lt;strong&gt;ggplot2&lt;/strong&gt; (&lt;a href="http://aarongonzales.net/plotly_examples.html"&gt;see this post for details&lt;/a&gt;).  In turn, you'll need to use Plotly's APIs to create the unavailable chart types, which I have just started to work with.  This summer, I'm going to explore using Plotly as well using Python, &lt;a href="http://nbviewer.ipython.org/github/plotly/python-user-guide/blob/master/s00_homepage/s00_homepage.ipynb"&gt;which has a well-developed API&lt;/a&gt; and appears to work very well with the IPython Notebook.  &lt;/p&gt;
&lt;p&gt;As always, please contact me at &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#107;&amp;#121;&amp;#108;&amp;#101;&amp;#46;&amp;#119;&amp;#97;&amp;#108;&amp;#107;&amp;#101;&amp;#114;&amp;#64;&amp;#116;&amp;#99;&amp;#117;&amp;#46;&amp;#101;&amp;#100;&amp;#117;"&gt;&amp;#107;&amp;#121;&amp;#108;&amp;#101;&amp;#46;&amp;#119;&amp;#97;&amp;#108;&amp;#107;&amp;#101;&amp;#114;&amp;#64;&amp;#116;&amp;#99;&amp;#117;&amp;#46;&amp;#101;&amp;#100;&amp;#117;&lt;/a&gt; or get in touch with me on &lt;a href="https://twitter.com/kyle_e_walker"&gt;Twitter&lt;/a&gt; if you have any questions or feedback.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Thanks to:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/plotlygraphs"&gt;The Plotly team&lt;/a&gt; for their amazing work;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/WTTC"&gt;The World Travel and Tourism Council&lt;/a&gt; for generously making their data publicly available.  &lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kyle Walker</dc:creator><pubDate>Mon, 12 May 2014 00:00:00 -0500</pubDate><guid>tag:walkerke.github.io,2014-05-12:2014/05/tourism-plotly/</guid><category>R</category><category>Plotly</category><category>World Regional</category></item><item><title>Visualizing fertility trends in Europe</title><link>http://walkerke.github.io/2014/03/tfr-in-europe/</link><description>&lt;p&gt;In the classroom, interactive data visualizations can embed a wealth of information that can be interactively queried by the instructor depending on the course topics and students' questions.  The example I'll discuss below worked for me exactly in this way.  I'll show how to create an interactive chart using the World Bank's open data API; my example looks at fertility trends in European countries since 1960.  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://data.worldbank.org/"&gt;The World Bank's Open Data catalog&lt;/a&gt; is a tremendous resource for any instructor addressing global issues; the website itself has readily-available data and charts for view.  Additionally, the World Bank makes these datasets available to developers via their API, &lt;a href="https://blogs.worldbank.org/opendata/accessing-world-bank-data-apis-python-r-ruby-stata"&gt;which can in turn be accessed through modules in Python, R, Ruby, and Stata&lt;/a&gt;.    In R, the API is available through the &lt;a href="https://github.com/vincentarelbundock/WDI"&gt;WDI&lt;/a&gt; package by Vincent Arel-Bundock, which makes it very simple for users to quickly access formatted World Bank datasets.  With the &lt;a href="https://github.com/ramnathv/rCharts"&gt;rCharts&lt;/a&gt; package, R users can then create dynamic D3 visualizations using these data.  &lt;/p&gt;
&lt;p&gt;In my World Regional Geography course at TCU, I spent a class period discussing demographic shifts in Europe, with a focus on fertility declines and aging populations in various parts of the continent.  My goal was to create a visualization that would allow me to interactively explore how fertility has declined in different ways in in different regions, and then discuss with my students the reasons why we observe these variations.  To get started, I called the World Bank API in R with the WDI package to give me the total fertility rates (the number of children a woman in a population would be expected to have in her lifetime given current age-specific fertility rates) for selected European countries by year since 1960.  The code below shows how to do this: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;library&lt;span class="p"&gt;(&lt;/span&gt;WDI&lt;span class="p"&gt;)&lt;/span&gt;
library&lt;span class="p"&gt;(&lt;/span&gt;rCharts&lt;span class="p"&gt;)&lt;/span&gt;
library&lt;span class="p"&gt;(&lt;/span&gt;plyr&lt;span class="p"&gt;)&lt;/span&gt;

countries &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; c&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;AL&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;AT&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;BE&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;BA&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;BG&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;HR&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;CZ&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;DK&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;FI&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;FR&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;DE&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;GR&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
               &lt;span class="s"&gt;&amp;quot;HU&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;IS&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;IE&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;IT&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;NL&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;NO&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;PL&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;PT&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;RO&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;RS&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;SK&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;SI&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
               &lt;span class="s"&gt;&amp;quot;ES&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;SE&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;CH&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;GB&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

tfr &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; WDI&lt;span class="p"&gt;(&lt;/span&gt;country &lt;span class="o"&gt;=&lt;/span&gt; countries&lt;span class="p"&gt;,&lt;/span&gt; indicator &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;SP.DYN.TFRT.IN&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; start &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1960&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; end &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;2011&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A couple notes about the above code.  The WDI package asks for a vector of ISO-2 country codes for which it will fetch data; you can get those from many places, such as &lt;a href="http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2"&gt;this Wikipedia page&lt;/a&gt;.  The &lt;code&gt;WDI&lt;/code&gt; function also requires the World Bank's code for your indicator of interest; you can use the &lt;code&gt;WDIsearch&lt;/code&gt; function in R to look for indicator codes, or simply look them up on the World Bank's website.  I've selected the code for the total fertility rate (TFR), and asked the function to give me data from 1960 to 2011 (the last year that TFR data are available).   I now have an R data frame, &lt;code&gt;tfr&lt;/code&gt;, that includes a time series of total fertility rates since 1960 for each country I asked for.  &lt;/p&gt;
&lt;p&gt;To visualize the data, I have selected the &lt;a href="http://nvd3.org/"&gt;NVD3 library&lt;/a&gt;, which is a D3 charting library that is available to R users through rCharts.  The code below will clean the data slightly for visualization, and call rCharts' &lt;code&gt;nPlot&lt;/code&gt; function to create an interactive chart.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;#Clean up the data a bit&lt;/span&gt;
tfr &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; rename&lt;span class="p"&gt;(&lt;/span&gt;tfr&lt;span class="p"&gt;,&lt;/span&gt; replace &lt;span class="o"&gt;=&lt;/span&gt; c&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;SP.DYN.TFRT.IN&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;TFR&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

tfr&lt;span class="o"&gt;$&lt;/span&gt;TFR &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; round&lt;span class="p"&gt;(&lt;/span&gt;tfr&lt;span class="o"&gt;$&lt;/span&gt;TFR&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Create the chart&lt;/span&gt;
tfrPlot &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; nPlot&lt;span class="p"&gt;(&lt;/span&gt;
  TFR &lt;span class="o"&gt;~&lt;/span&gt; year&lt;span class="p"&gt;,&lt;/span&gt; 
  data &lt;span class="o"&gt;=&lt;/span&gt; tfr&lt;span class="p"&gt;,&lt;/span&gt; 
  group &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;country&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  type &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;lineChart&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Add axis labels and format the tooltip&lt;/span&gt;
tfrPlot&lt;span class="o"&gt;$&lt;/span&gt;yAxis&lt;span class="p"&gt;(&lt;/span&gt;axisLabel &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Total fertility rate&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; width &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;62&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

tfrPlot&lt;span class="o"&gt;$&lt;/span&gt;xAxis&lt;span class="p"&gt;(&lt;/span&gt;axisLabel &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Year&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

tfrPlot&lt;span class="o"&gt;$&lt;/span&gt;chart&lt;span class="p"&gt;(&lt;/span&gt;tooltipContent &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;#! function(key, x, y){&lt;/span&gt;
&lt;span class="s"&gt;        return &amp;#39;&amp;lt;h3&amp;gt;&amp;#39; + key + &amp;#39;&amp;lt;/h3&amp;gt;&amp;#39; + &lt;/span&gt;
&lt;span class="s"&gt;        &amp;#39;&amp;lt;p&amp;gt;&amp;#39; + y + &amp;#39; in &amp;#39; + x + &amp;#39;&amp;lt;/p&amp;gt;&amp;#39;&lt;/span&gt;
&lt;span class="s"&gt;        } !#&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Typing &lt;code&gt;tfrPlot&lt;/code&gt; in the console produces the graphic below:&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;iframe src="http://dl.dropboxusercontent.com/s/atqfmcybgl1rk5n/tfrplot.html" width="825" height="450" seamless frameBorder = "0"&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;The chart shows an overall decline in fertility in Europe since 1960; however, beyond that, it is a mess of information.  You can get tooltips on hover that allow you to discern some things that are going on, but it is really difficult to make out any particular country.  This is where NVD3 and rCharts really shine, however.  The chart's legend is interactive; you can click the bubble next to each country's name to turn off and on its line.  Further, if you double-click a country, the chart will reveal the line for that country only.  In turn, the chart functions as an application that the user can modify as she or he wishes.  For example, I used this chart to explore differences between fertility levels in Scandinavia and Southern Europe with a few clicks, as seen in the example below:&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;iframe src="http://dl.dropboxusercontent.com/s/ulb0fdqii1atycp/selected.html" width="825" height="450" seamless frameBorder = "0"&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;In class, we interactively explored comparisons between countries all over Europe, discussing the varying roles of social programs, cultural differences, economic well-being, etc. in influencing the type of gaps like those observed in the chart above.  &lt;/p&gt;
&lt;p&gt;Additionally, rCharts includes options for specifying the type of chart you want to show in advance.  For example, I discussed in class the specific case of Romania, which during the &lt;a href="http://en.wikipedia.org/wiki/Nicolae_Ceausescu"&gt;Ceausescu era&lt;/a&gt; pursued severe pro-natalist policies that influenced sharp fluctuations in the country's TFR, and had lasting negative impacts on the health of Romanian women.  The code below modifies the chart's options to show only Romania.  To do this, I created a vector of unique country codes in their sorted order in my &lt;code&gt;tfr&lt;/code&gt; data frame, then created a boolean vector in which only the position representing Romania was set to false.  I can then pass this vector as a parameter in my chart's options, telling it to disable all lines except Romania.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ids &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; unique&lt;span class="p"&gt;(&lt;/span&gt;tfr&lt;span class="o"&gt;$&lt;/span&gt;iso2c&lt;span class="p"&gt;)&lt;/span&gt;

rom &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; as.logical&lt;span class="p"&gt;(&lt;/span&gt;ids &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;RO&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

tfrPlot&lt;span class="o"&gt;$&lt;/span&gt;set&lt;span class="p"&gt;(&lt;/span&gt;disabled &lt;span class="o"&gt;=&lt;/span&gt; rom&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Below, you can see the result. Note the huge jump in fertility between 1966 and 1967, which was in part the result of strong restrictions on abortion and contraception in the country.  Shortly thereafter, however, fertility rates fell once again; the slight bump in the 1980s was due to additional government influence in child-bearing, which in part included government monitoring of women to ensure that they were carrying pregnancies to term. Since the fall of the Ceausescu regime, the fertility rate plummeted to what is now one of the lowest in the world.  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;iframe src="http://dl.dropbox.com/s/1c3e3iixo1alfgn/romaniaplot.html" width="825" height="450" seamless frameBorder = "0"&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;For me, this example shows the power of interactive data visualization in the classroom.  Instead of a series of pre-made charts that I had chosen in advance of my lecture, my students were able to choose countries they were interested in looking at, allowing me to build a more interactive classroom experience.  &lt;/p&gt;
&lt;p&gt;I should mention as well that I display these charts in class using &lt;a href="https://github.com/ramnathv/slidify"&gt;slidify&lt;/a&gt;, which is an R package for creating HTML5 presentations from Markdown.  Its author, Ramnath Vaidyanathan, is also the author of rCharts; as such, slidify and rCharts play very nicely together.  I'll likely discuss my experiences with slidify in a future post, as I am using it now to produce all my lecture materials.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;To create the fertility chart on your computer, follow these steps:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Be sure that you have the following R packages installed: &lt;strong&gt;WDI&lt;/strong&gt;, &lt;strong&gt;plyr&lt;/strong&gt;, and &lt;strong&gt;rCharts&lt;/strong&gt;.  rCharts is not yet on CRAN, so you'll need to install it from GitHub with the &lt;strong&gt;devtools&lt;/strong&gt; package.  I use the &lt;code&gt;dev&lt;/code&gt; branch of rCharts, which has the latest updates; you can install this with the command, &lt;code&gt;devtools::install_github('rCharts', 'ramnathv', ref='dev')&lt;/code&gt;.  &lt;/li&gt;
&lt;li&gt;Run the following command: &lt;code&gt;source("https://raw.github.com/walkerke/teaching-with-datavis/master/tfr-in-europe.R")&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Type &lt;code&gt;tfrPlot&lt;/code&gt; in the R console to create your chart!  Just a quick note: I have trouble showing NVD3 charts in the RStudio viewer, so you may need to open the chart in your web browser of choice to view it.  &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The code is available on GitHub; use it as you please (though I'd love to hear how you are adapting/modifying it if you do).    &lt;/p&gt;
&lt;p&gt;To contact me, email me at &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#107;&amp;#121;&amp;#108;&amp;#101;&amp;#46;&amp;#119;&amp;#97;&amp;#108;&amp;#107;&amp;#101;&amp;#114;&amp;#64;&amp;#116;&amp;#99;&amp;#117;&amp;#46;&amp;#101;&amp;#100;&amp;#117;"&gt;&amp;#107;&amp;#121;&amp;#108;&amp;#101;&amp;#46;&amp;#119;&amp;#97;&amp;#108;&amp;#107;&amp;#101;&amp;#114;&amp;#64;&amp;#116;&amp;#99;&amp;#117;&amp;#46;&amp;#101;&amp;#100;&amp;#117;&lt;/a&gt;, or connect with me on &lt;a href="https://twitter.com/kyle_e_walker"&gt;Twitter&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Thanks to:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://data.worldbank.org/"&gt;The World Bank&lt;/a&gt; for generously making their data publicly available;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/ramnath_vaidya"&gt;Ramnath Vaidyanathan&lt;/a&gt; and &lt;a href="https://twitter.com/timelyportfolio"&gt;Timely Portfolio&lt;/a&gt; for the amazing rCharts;&lt;/li&gt;
&lt;li&gt;Vincent Arel-Bundock for creating the WDI package;&lt;/li&gt;
&lt;li&gt;The developers of NVD3 and d3.js for their innovations in data visualization.  &lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kyle Walker</dc:creator><pubDate>Thu, 06 Mar 2014 00:00:00 -0600</pubDate><guid>tag:walkerke.github.io,2014-03-06:2014/03/tfr-in-europe/</guid><category>R</category><category>rCharts</category><category>World Regional</category></item><item><title>Visualizing the U.S. Hispanic population by state</title><link>http://walkerke.github.io/2014/01/hispanic-pop-by-state/</link><description>&lt;p&gt;Welcome!  This is the first post of my effort to document my foray into developing interactive data visualizations for use in my teaching.  Hopefully these examples will be of use to some readers who are interested in creating their own visualizations.  &lt;/p&gt;
&lt;p&gt;I'll first provide a bit of background.  I'm a geography professor at Texas Christian University in Fort Worth, and started getting interested in data visualization when putting together materials for a course I taught in population geography last spring.  Visuals are essential for social science instructors; however, it is not always easy to find publicly available images that are both effective and suitable for what you want to teach (I imagine many of you, like me, have gone on many a failed Google image search).  So, I started looking into developing my own materials.  I happened upon the incredible &lt;a href="http://d3js.org/"&gt;D3 JavaScript library&lt;/a&gt; by Mike Bostock and the stunning graphics from the &lt;a href="http://www.healthmetricsandevaluation.org/tools/data-visualizations"&gt;Institute for Health Metrics and Evaluation&lt;/a&gt; and was immediately blown away.  Interactive examples like &lt;a href="http://bl.ocks.org/mbostock/4062085"&gt;this population pyramid&lt;/a&gt; can be very effective for conveying social science concepts.  &lt;/p&gt;
&lt;p&gt;As a relative newcomer to JavaScript, however, I looked into what other resources were available for creating these types of interactive visualizations, especially in languages I have more of a familiarity with (R and Python, specifically).  Thus far, I've been using the fantastic &lt;a href="http://rcharts.io/"&gt;rCharts&lt;/a&gt; R package by Ramnath Vaidyanathan, which provides an R wrapper for several JavaScript charting libraries, and the the &lt;a href="http://cran.r-project.org/web/packages/googleVis/index.html"&gt;googleVis&lt;/a&gt; package, which is an R interface for the Google Charts API, and among other things allows R users to create &lt;a href="http://www.gapminder.org/"&gt;Hans Rosling-style motion charts.&lt;/a&gt;.  I've also started looking into tools like &lt;a href="https://plot.ly/"&gt;plotly&lt;/a&gt;, which has both R and Python APIs, and hope to create my own D3 visualizations from scratch eventually.  &lt;/p&gt;
&lt;p&gt;When possible, my examples on this site will use open data/open source tools and will be available on GitHub, so that anyone interested can use and adapt these examples as they need.  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;My first example is a visualization of the composition of Hispanic populations by state in the U.S., for the ten states with the largest Hispanic populations in 2010.   In my introductory geography course, I'm going to be soon discussing shifts in the racial &amp;amp; ethnic composition of the U.S.  Sometime between 2040 and 2050, non-Hispanic whites are projected to become a minority in the U.S., in large part due to continued growth of the Hispanic population.  However, I find that many discussions of this demographic shift in the media tend to homogenize the Hispanic population, which is not what I want to convey to my students; as such, I wanted to find a way to visualize its diversity.  I came across &lt;a href="http://www.pewhispanic.org/2012/09/06/population-distribution-of-hispanic-origin-groups-by-county/"&gt;these interesting interactive maps from the Pew Research Center&lt;/a&gt;, and downloaded the data they made available to see what I might do with it.  &lt;/p&gt;
&lt;p&gt;The data made available by the Pew Research Center are in Excel format.  There are many libraries for reading Excel data into R, but they often are not straightforward to use, so I first opened the file in Excel and saved it as a CSV for ease of use.  In their original form, the data are not in a great format for visualization in R; as such, I needed to do some munging, with help from Hadley Wickham's excellent packages.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# First, download the Excel file from the Pew Research Center, and save it as a CSV in your working directory&lt;/span&gt;

library&lt;span class="p"&gt;(&lt;/span&gt;stringr&lt;span class="p"&gt;)&lt;/span&gt;
library&lt;span class="p"&gt;(&lt;/span&gt;plyr&lt;span class="p"&gt;)&lt;/span&gt;
library&lt;span class="p"&gt;(&lt;/span&gt;rCharts&lt;span class="p"&gt;)&lt;/span&gt;
library&lt;span class="p"&gt;(&lt;/span&gt;reshape2&lt;span class="p"&gt;)&lt;/span&gt;

dat &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; read.csv&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;all_counties_by_top_six_groups.csv&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

keep &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; seq&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

dat &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; dat&lt;span class="p"&gt;[,&lt;/span&gt;keep&lt;span class="p"&gt;]&lt;/span&gt;

nms &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; c&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Total.Hisp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Mexican&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Puerto.Rican&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Cuban&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Salvadoran&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Dominican&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Guatemalan&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Other&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

names&lt;span class="p"&gt;(&lt;/span&gt;dat&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; nms

dat &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; dat&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;c&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The above code simply cleans up the data to shape it into a nicely formatted data frame, and subsets it to get the population counts that we need.  However, there are still some steps to take before the data can be visualized.  Given the original data format, R has read in all my numeric data as factors, which wouldn't let me make the kinds of manipulations I needed to do to aggregate the data by state.  Such aggregation also required some string manipulation, so that I could identify which counts correspond to each state (given that the geographic identifiers in the data are presented as 'County, State').  The code that follows cleans up the data even further and aggregates each numeric column by state.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;dat &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; cbind&lt;span class="p"&gt;(&lt;/span&gt;dat&lt;span class="p"&gt;,&lt;/span&gt; ldply&lt;span class="p"&gt;(&lt;/span&gt;str_split&lt;span class="p"&gt;(&lt;/span&gt;dat&lt;span class="o"&gt;$&lt;/span&gt;Name&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;, &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

names&lt;span class="p"&gt;(&lt;/span&gt;dat&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; c&lt;span class="p"&gt;(&lt;/span&gt;nms&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;County&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;State&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

convCols &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="m"&gt;9&lt;/span&gt;

dat&lt;span class="p"&gt;[,&lt;/span&gt;convCols&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; apply&lt;span class="p"&gt;(&lt;/span&gt;dat&lt;span class="p"&gt;[,&lt;/span&gt;convCols&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="p"&gt;)&lt;/span&gt; as.numeric&lt;span class="p"&gt;(&lt;/span&gt;as.character&lt;span class="p"&gt;(&lt;/span&gt;gsub&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;,&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; x&lt;span class="p"&gt;))))&lt;/span&gt;

sums &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; ddply&lt;span class="p"&gt;(&lt;/span&gt;dat&lt;span class="p"&gt;,&lt;/span&gt; .&lt;span class="p"&gt;(&lt;/span&gt;State&lt;span class="p"&gt;),&lt;/span&gt; numcolwise&lt;span class="p"&gt;(&lt;/span&gt;sum&lt;span class="p"&gt;))&lt;/span&gt;

sorteddf &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; sums&lt;span class="p"&gt;[&lt;/span&gt;order&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;sums&lt;span class="o"&gt;$&lt;/span&gt;Total.Hisp&lt;span class="p"&gt;),][&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I've now identified the 10 states with the largest Hispanic populations, and aggregated the different ancestry columns by state.  I now needed to decide how to visualize these data.  I elected to use the &lt;a href="http://dimplejs.org/"&gt;dimple&lt;/a&gt; D3 library, which is available through rCharts.  My hope was to create something like &lt;a href="http://dimplejs.org/examples_viewer.html?id=bars_horizontal_stacked_100pct"&gt;this horizontal 100% chart&lt;/a&gt;, which would allow direct comparison of the Hispanic population composition of these states.  Fortunately, rCharts makes this straightforward.  I first created a new data frame that held percentages instead of raw counts, reshaped it into a suitable format, and called rCharts' &lt;code&gt;dPlot&lt;/code&gt; function to create the chart.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;newdf &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; data.frame&lt;span class="p"&gt;(&lt;/span&gt;sorteddf&lt;span class="o"&gt;$&lt;/span&gt;State&lt;span class="p"&gt;)&lt;/span&gt;

vals &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; c&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Mexican&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Puerto.Rican&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Cuban&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Salvadoran&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Dominican&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Guatemalan&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Other&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kr"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;v &lt;span class="kr"&gt;in&lt;/span&gt; vals&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  newdf&lt;span class="p"&gt;[[&lt;/span&gt;v&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; round&lt;span class="p"&gt;(((&lt;/span&gt;sorteddf&lt;span class="p"&gt;[[&lt;/span&gt;v&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; sorteddf&lt;span class="o"&gt;$&lt;/span&gt;Total.Hisp&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

names&lt;span class="p"&gt;(&lt;/span&gt;newdf&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; c&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;State&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; vals&lt;span class="p"&gt;)&lt;/span&gt;

df.melt &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; melt&lt;span class="p"&gt;(&lt;/span&gt;newdf&lt;span class="p"&gt;,&lt;/span&gt; variable.name &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Ancestry&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; value.name &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Share&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

d1 &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; dPlot&lt;span class="p"&gt;(&lt;/span&gt;
  x &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Share&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  y &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;State&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  groups &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Ancestry&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  data &lt;span class="o"&gt;=&lt;/span&gt; df.melt&lt;span class="p"&gt;,&lt;/span&gt; 
  type &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;#Here, set the chart options to tell rCharts how to format the visualization  &lt;/span&gt;
d1&lt;span class="o"&gt;$&lt;/span&gt;xAxis&lt;span class="p"&gt;(&lt;/span&gt;type &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;addPctAxis&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
d1&lt;span class="o"&gt;$&lt;/span&gt;yAxis&lt;span class="p"&gt;(&lt;/span&gt;type &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;addCategoryAxis&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; orderRule &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;State&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

d1&lt;span class="o"&gt;$&lt;/span&gt;legend&lt;span class="p"&gt;(&lt;/span&gt; x &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; y &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; width &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;700&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; height &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; horizontalAlign &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;left&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; orderRule &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Ancestry&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Below, you can see the result: &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;&lt;iframe src="http://bl.ocks.org/walkerke/raw/8300770/" width="825" height="450" seamless frameBorder = "0"&gt;&lt;/iframe&gt;&lt;/h2&gt;
&lt;p&gt;The plot has accomplished what I hoped - displaying the considerable diversity of the Hispanic population across different states in the U.S.  The key here to the chart is the interactivity; while I could have produced a static visualization just like this, each component of the chart provides a tooltip on hover that gives specific information about its content.  I now have a more interactive document that I can explore with my students.  &lt;/p&gt;
&lt;p&gt;As the chart reveals, Hispanics are generally of Mexican origin in several states, including my state of Texas, where 84% of Hispanics are of Mexican ancestry; this will be the frame of reference for my students.  However, I can show students how in other parts of the country, such as my old home of New York, 'Hispanic' means something very different, as individuals of Mexican heritage only make up 13% of the state's Hispanic population.  It is also interesting to see how the 'Other' category varies by state.  In some states (New York, New Jersey, New Mexico, Florida), this category is very large.  The &lt;a href="http://www.pewhispanic.org/files/2012/06/The-10-Largest-Hispanic-Origin-Groups.pdf"&gt;Pew Center report provides some additional information on this&lt;/a&gt;; for example, many Colombians, Hondurans, and Peruvians live in the Miami area, and Queens, NYC has a large Ecuadorian population.  In New Mexico, the data reflect the Spanish and Native American heritage of many Hispanics in the state.  &lt;/p&gt;
&lt;p&gt;There are still some improvements that could be made; for example, in some browsers, the y-axis title is partially hidden, which I need to look into further.  Also, in order to get the effects to work correctly, I had to modify the version of Dimple in the HTML to point to version 1.1.3 (rCharts is still on 1.1.1).  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;To create this chart on your computer, follow these steps:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Visit the &lt;a href="http://www.pewhispanic.org/2012/09/06/population-distribution-of-hispanic-origin-groups-by-county/"&gt;Pew Research Center site&lt;/a&gt;, download the Excel file they make available, and save it as a CSV in your working directory (don't change the name, just the type).  &lt;/li&gt;
&lt;li&gt;Be sure that you have the following R packages installed: &lt;code&gt;stringr&lt;/code&gt;, &lt;code&gt;plyr&lt;/code&gt;, &lt;code&gt;rCharts&lt;/code&gt;, and &lt;code&gt;reshape2&lt;/code&gt;.  &lt;code&gt;rCharts&lt;/code&gt; is not yet on CRAN, so you'll need to install it from GitHub with the &lt;code&gt;devtools&lt;/code&gt; package.  I use the &lt;code&gt;dev&lt;/code&gt; branch of rCharts, which has the latest updates; you can install this with the command, &lt;code&gt;devtools::install_github('rCharts', 'ramnathv', ref='dev')&lt;/code&gt;.  &lt;/li&gt;
&lt;li&gt;Run the following command: &lt;code&gt;source("https://raw.github.com/walkerke/teaching-with-datavis/master/hispanics-by-state.R")&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Type &lt;code&gt;d1&lt;/code&gt; in your console, and you'll have your chart!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Alternatively, feel free to grab the code from GitHub and modify it as you wish.  &lt;/p&gt;
&lt;p&gt;I'd love to hear your feedback; you can send me an email at &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#107;&amp;#121;&amp;#108;&amp;#101;&amp;#46;&amp;#119;&amp;#97;&amp;#108;&amp;#107;&amp;#101;&amp;#114;&amp;#64;&amp;#116;&amp;#99;&amp;#117;&amp;#46;&amp;#101;&amp;#100;&amp;#117;"&gt;&amp;#107;&amp;#121;&amp;#108;&amp;#101;&amp;#46;&amp;#119;&amp;#97;&amp;#108;&amp;#107;&amp;#101;&amp;#114;&amp;#64;&amp;#116;&amp;#99;&amp;#117;&amp;#46;&amp;#101;&amp;#100;&amp;#117;&lt;/a&gt;, or connect with me on &lt;a href="https://twitter.com/kyle_e_walker"&gt;Twitter&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Thanks to:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.pewhispanic.org/"&gt;The Pew Research Center's Hispanic Trends Project&lt;/a&gt; for making their data publicly available;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/ramnath_vaidya"&gt;Ramnath Vaidyanathan&lt;/a&gt; and &lt;a href="https://twitter.com/timelyportfolio"&gt;Timely Portfolio&lt;/a&gt; for their efforts and tutorials on rCharts;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/jkiernander"&gt;John Kiernander&lt;/a&gt; for the DimpleJS library;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/hadleywickham"&gt;Hadley Wickham&lt;/a&gt; and the &lt;a href="https://twitter.com/rstudioapp"&gt;RStudio team&lt;/a&gt; for making R a much better place to work with data.  &lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kyle Walker</dc:creator><pubDate>Thu, 09 Jan 2014 00:00:00 -0600</pubDate><guid>tag:walkerke.github.io,2014-01-09:2014/01/hispanic-pop-by-state/</guid><category>R</category><category>rCharts</category><category>World Regional</category></item></channel></rss>