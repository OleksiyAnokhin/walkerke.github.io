else {
y <- c(y, i)
}
}
}
v <- unique(vec)
unique <- function(x) {
y <- numeric(0)
for (i in x) {
if(any(y == i)) {
next
}
else {
y <- c(y, i)
}
}
y
}
v <- unique(vec)
#Script to extract unique values from a vector
unique <- function(x) {
y <- numeric(0)
for (i in x) {
if(any(y == i)) {
next
}
else {
y <- c(y, i)
}
}
y
}
vec <- c(1, 3, 4, 4, 5, 5, 5, 7)
unique(vec)
b <- c(1, 2, 3, 3, 3, 3, 5, 6, 2, 3, 4, 10, 17, 17)
unique(b)
unique <- function(x) {
y <- list(0)
for (i in x) {
if(any(y == i)) {
next
}
else {
y <- c(y, i)
}
}
y
}
vec <- c(1, 3, 4, 4, 5, 5, 5, 7)
unique(vec)
unique <- function(x) {
y <- list()
for (i in x) {
if(any(y == i)) {
next
}
else {
y <- c(y, i)
}
}
y
}
vec <- c(1, 3, 4, 4, 5, 5, 5, 7)
unique(vec)
o <- c(2, 3, "a")
o
test <- unique(vec)
unique <- function(x) {
y <- list()
for (i in x) {
if(any(y == i)) {
next
}
else {
y <- c(y, i)
}
}
unlist(y)
}
vec <- c(1, 3, 4, 4, 5, 5, 5, 7)
unique(vec)
unique(o)
p <- c("a", "a", 7, 7)
unique(p)
unique(vec)
#Script to extract unique values from a vector
uniqueFun <- function(x) {
y <- list()
for (i in x) {
if(any(y == i)) {
next
}
else {
y <- c(y, i)
}
}
unlist(y)
}
vec <- c(1, 3, 4, 4, 5, 5, 5, 7)
uniqueFun(vec)
unique(vec)
set.seed(1983)
d <- rnorm(10000)
names(HairEyeColor)
names(iris)
#Script to extract unique values from a vector
uniqueFun <- function(x) {
y <- list()
for (i in x) {
if(any(y == i)) {
next
}
else {
y <- c(y, i)
}
}
unlist(y)
}
vec <- c(1, 3, 4, 4, 5, 5, 5, 7)
list <- c(1, 1, 1, "a", "a", "b", 5)
list <- list(1, 1, 1, "a", "a", "b", 5)
uniqueFun(list)
list
#Script to extract unique values from a vector
uniqueFun <- function(x) {
y <- unlist(x)
z <- list()
for (i in y) {
if(any(z == i)) {
next
}
else {
z <- c(z, i)
}
}
unlist(z)
}
vec <- c(1, 3, 4, 4, 5, 5, 5, 7)
list <- list(1, 1, 1, "a", "a", "b", 5)
uniqueFun(list)
#Script to extract unique values from a vector
uniqueFun <- function(x) {
y <- unlist(x)
z <- list()
for (i in y) {
if(any(z == i)) {
next
}
else {
z <- c(z, i)
}
}
unlist(z)
}
vec <- c(1, 3, 4, 4, 5, 5, 5, 7)
list <- list(1, 1, 1, "a", "a", "b", 5)
uniqueFun(vec)
uniqueFun(list)
list <- list(1, 1, 1, "a", "a", "b", 5, NA, NA)
uniqueFun(list)
#Question 1
cube <- function(x, n) {
x^3
}
cube(3)
pow <- function(x=4, n=3) {
x^n
}
pow()
x <- 1:10
if(x > 5) {
x <- 0
}
x
library(datasets)
data(iris)
?iris
names(iris)
mean(iris$Sepal.Length)
View(iris)
vg <- subset(iris, species="virginica")
vg <- subset(iris, species="virginica")
mean(vg$Sepal.Length)
vg <- subset(iris, Species="virginica")
mean(vg$Sepal.Length)
vg <- subset(iris, Species=="virginica")
mean(vg$Sepal.Length)
pk <- c("slidify", "slidifyLibraries", "rCharts")
devtools::install_github(pk, "ramnathv", ref = "dev")
getmonitor <- function(id, dir, summarize = FALSE) {
file <- paste0(dir, "/", id, ".csv")
data <- read.csv(file)
if (summarize = TRUE) {
summary(data)
}
}
getmonitor <- function(id, dir, summarize = FALSE) {
file <- paste0(dir, "/", id, ".csv")
data <- read.csv(file)
if (summarize == TRUE) {
summary(data)
}
}
getmonitor("236", path)
path <- "C:/Users/kylewalker/Documents/Training/R/Computing for Data Analysis/specdata"
getmonitor("236", path)
path <- "C:/Users/kylewalker/Documents/Training/R/Computing for Data Analysis/specdata/specdata"
getmonitor("236", path)
data(data)
#Programming assignment 2
getmonitor <- function(id, dir, summarize = FALSE) {
file <- paste0(dir, "/", id, ".csv")
data <- read.csv(file)
if (summarize == TRUE) {
dt <- data.frame(data)
summary(dt)
}
else {
dt <- data.frame(data)
}
}
path <- "C:/Users/kylewalker/Documents/Training/R/Computing for Data Analysis/specdata/specdata"
getmonitor("236", path)
#Programming assignment 2
getmonitor <- function(id, dir, summarize = FALSE) {
file <- paste0(dir, "/", id, ".csv")
data <- read.csv(file)
if (summarize == TRUE) {
return(data)
summary(dt)
}
else {
return(data)
}
}
path <- "C:/Users/kylewalker/Documents/Training/R/Computing for Data Analysis/specdata/specdata"
d <- getmonitor("236", path)
head(d)
d1 <- getmonitor(1, path)
d1 <- getmonitor(001, path)
d1 <- getmonitor("001", path)
#Programming assignment 2
getmonitor <- function(id, dir, summarize = FALSE) {
file <- paste0(dir, "/", as.character(id), ".csv")
data <- read.csv(file)
if (summarize == TRUE) {
return(data)
summary(dt)
}
else {
return(data)
}
}
path <- "C:/Users/kylewalker/Documents/Training/R/Computing for Data Analysis/specdata/specdata"
d <- getmonitor("236", path)
head(d)
d <- getmonitor(236, path)
head(d)
d1 <- getmonitor(001, path)
d200 <- getmonitor("200", path, TRUE)
#Programming assignment 2
getmonitor <- function(id, dir, summarize = FALSE) {
file <- paste0(dir, "/", as.character(id), ".csv")
data <- read.csv(file)
if (summarize == TRUE) {
return(data)
return(summary(data))
}
else {
return(data)
}
}
d200 <- getmonitor("200", path, TRUE)
d200 <- getmonitor("200", path, summarize = TRUE)
#Programming assignment 2
getmonitor <- function(id, dir, summarize = FALSE) {
file <- paste0(dir, "/", as.character(id), ".csv")
data <- read.csv(file)
if (summarize == TRUE) {
return(data)
summary(data)
}
else {
return(data)
}
}
d200 <- getmonitor("200", path, summarize = TRUE)
summary(d200)
#Programming assignment 2
getmonitor <- function(id, dir, summarize = FALSE) {
file <- paste0(dir, "/", as.character(id), ".csv")
data <- read.csv(file)
if (summarize == TRUE) {
return(data)
return(summary(data))
}
else {
return(data)
}
}
d200 <- getmonitor("200", path, summarize = TRUE)
#Programming assignment 2
getmonitor <- function(id, dir, summarize = FALSE) {
file <- paste0(dir, "/", as.character(id), ".csv")
data <- read.csv(file)
if (summarize) {
return(data)
return(summary(data))
}
else {
return(data)
}
}
d200 <- getmonitor("200", path, summarize = TRUE)
s <- summary(d200)
s
#Programming assignment 2
getmonitor <- function(id, dir, summarize = FALSE) {
file <- paste0(dir, "/", as.character(id), ".csv")
data <- read.csv(file)
if (summarize) {
summ <- summary(data)
}
return(summ, data)
}
d200 <- getmonitor("200", path, summarize = TRUE)
#Programming assignment 2
getmonitor <- function(id, dir, summarize = FALSE) {
file <- paste0(dir, "/", as.character(id), ".csv")
data <- read.csv(file)
if (summarize) {
summ <- summary(data)
}
result <- list(summ, data)
return(result)
}
d200 <- getmonitor("200", path, summarize = TRUE)
d200
#Programming assignment 2
getmonitor <- function(id, dir, summarize = FALSE) {
file <- paste0(dir, "/", as.character(id), ".csv")
data <- read.csv(file)
if (summarize) {
summ <- summary(data)
}
return(summ)
}
d200 <- getmonitor("200", path, summarize = TRUE)
d200 <- getmonitor("200", path, TRUE)
#Programming assignment 2
getmonitor <- function(id, dir, summarize = FALSE) {
file <- paste0(dir, "/", as.character(id), ".csv")
data <- read.csv(file)
if (summarize) {
summ <- summary(data)
}
summ
}
d200 <- getmonitor("200", path, TRUE)
d200
#Programming assignment 2
getmonitor <- function(id, dir, summarize = FALSE) {
file <- paste0(dir, "/", as.character(id), ".csv")
data <- read.csv(file)
if (summarize) {
print(summary(data))
}
else {
data
}
}
d200 <- getmonitor("200", path, TRUE)
#Programming assignment 2
getmonitor <- function(id, dir, summarize = FALSE) {
file <- paste0(dir, "/", as.character(id), ".csv")
data <- read.csv(file)
if (summarize) {
print(summary(data))
data
}
else {
data
}
}
d200 <- getmonitor("200", path, TRUE)
d136 <- getmonitor(112, path,)
d136 <- getmonitor(112, path)
d136 <- getmonitor(112, path, TRUE)
d136 <- getmonitor(136, path, TRUE)
#Programming assignment 2
getmonitor <- function(id, dir, summarize = FALSE) {
file <- paste0(dir, "/", as.character(sprintf("%03d", id), ".csv")
data <- read.csv(file)
if (summarize) {
print(summary(data))
data
}
else {
data
}
}
#Programming assignment 2
getmonitor <- function(id, dir, summarize = FALSE) {
file <- paste0(dir, "/", as.character(sprintf("%03d", id)), ".csv")
data <- read.csv(file)
if (summarize) {
print(summary(data))
data
}
else {
data
}
}
path <- "C:/Users/kylewalker/Documents/Training/R/Computing for Data Analysis/specdata/specdata"
d <- getmonitor(236, path)
head(d)
d200 <- getmonitor("200", path, TRUE)
#Programming assignment 2
getmonitor <- function(id, dir, summarize = FALSE) {
file <- paste0(dir, "/", as.character(sprintf("%03d", as.numeric(id)), ".csv")
data <- read.csv(file)
if (summarize) {
print(summary(data))
data
}
else {
data
}
}
#Programming assignment 2
getmonitor <- function(id, dir, summarize = FALSE) {
file <- paste0(dir, "/", as.character(sprintf("%03d", as.numeric(id))), ".csv")
data <- read.csv(file)
if (summarize) {
print(summary(data))
data
}
else {
data
}
}
d200 <- getmonitor("200", path, TRUE)
d200 <- getmonitor(200, path, TRUE)
d1 <- getmonitor(1, path, TRUE)
require(devtools)
axis()
postscript()
serialize()
gzfile()
windows()
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
trellis.device()
xyplot(weight ~ Time | Diet, BodyWeight)
set.seed(1)
rpois(5, 2)
rpois(5, 2)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
string <- "she likes rum raisin after running hard"
string
r <- rexexpr("^s(.*?)r")
r <- regexpr("^s(.*?)r")
r <- regexpr("^s(.*?)r", string)
r
install.packages("stringr")
find_rtools()
library(devtools)
find_rtools()
install_github(c("assertthat", "testthat"))
install_github(c("httpuv", "shiny", "ggvis"), "rstudio")
require(ggvis)
vignette(package = "ggvis")
ggvis(
pipeline(mtcars, transform_bin(binwidth = 1)),
props(x = ~wt),
branch(
props(x = ~xmin__, x2 = ~xmax__, y = ~count__, y2 = 0),
mark_rect()
)
)
ggvis(
diamonds, by_group(cut), props(x = ~table, fill = ~cut),
transform_bin(binwidth = 1),
branch(
props(x = ~xmin__, x2 = ~xmax__, y = ~count__, fillOpacity := 0.6),
branch(
transform_stack(),
mark_rect(props(y = ~ymax__, y2 = ~ymin__))
)
)
)
data(diamonds, package = "ggplot2")
ggvis(diamonds, props(x = ~table),
branch_histogram()
)
qb_espn <- readHTMLTable("http://games.espn.go.com/ffl/tools/projections?&seasonTotals=true&seasonId=2013&slotCategoryId=0", stringsAsFactors = FALSE)$playertable_0
install.packages("XML")
require(XML)
qb_espn <- readHTMLTable("http://games.espn.go.com/ffl/tools/projections?&seasonTotals=true&seasonId=2013&slotCategoryId=0", stringsAsFactors = FALSE)$playertable_0
View(qb_espn)
fagents <- readHTMLTable("http://games.espn.go.com/fba/freeagency?leagueId=7859&teamId=4&seasonId=2014", stringsAsFactors = FALSE)
fagents
top200 <- readHTMLTable("http://espn.go.com/fantasy/basketball/story/_/page/nbadk2k14_ranksTop200/fantasy-basketball-rankings-top-200-2013-2014-nba-season", stringsAsFactors = FALSE)
top200
install.packages("psych")
##Initiate Urban GIS - Week One
source('~/Teaching/Urban GIS/Lecture materials/Week 1 - Intro/week1/week1.R')
setwd("~/Teaching/Urban GIS/Lecture materials/Week 1 - Intro/week1")
source('~/Teaching/Urban GIS/Lecture materials/Week 1 - Intro/week1/week1.R')
